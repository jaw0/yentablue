// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: achb.proto

package acproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import kibitz "github.com/jaw0/kibitz"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ACPHeartBeat struct {
	PeerInfo             *kibitz.PeerInfo `protobuf:"bytes,1,opt,name=peer_info,json=peerInfo,proto3" json:"peer_info,omitempty"`
	SortMetric           int32            `protobuf:"varint,2,opt,name=sort_metric,json=sortMetric,proto3" json:"sort_metric,omitempty"`
	ProcessId            int32            `protobuf:"varint,3,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	CpuMetric            int32            `protobuf:"varint,4,opt,name=cpu_metric,json=cpuMetric,proto3" json:"cpu_metric,omitempty"`
	CapacityMetric       int32            `protobuf:"varint,5,opt,name=capacity_metric,json=capacityMetric,proto3" json:"capacity_metric,omitempty"`
	Database             []string         `protobuf:"bytes,6,rep,name=database,proto3" json:"database,omitempty"`
	Uptodate             bool             `protobuf:"varint,7,opt,name=uptodate,proto3" json:"uptodate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ACPHeartBeat) Reset()         { *m = ACPHeartBeat{} }
func (m *ACPHeartBeat) String() string { return proto.CompactTextString(m) }
func (*ACPHeartBeat) ProtoMessage()    {}
func (*ACPHeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{0}
}
func (m *ACPHeartBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPHeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPHeartBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPHeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPHeartBeat.Merge(dst, src)
}
func (m *ACPHeartBeat) XXX_Size() int {
	return m.Size()
}
func (m *ACPHeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPHeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_ACPHeartBeat proto.InternalMessageInfo

func (m *ACPHeartBeat) GetPeerInfo() *kibitz.PeerInfo {
	if m != nil {
		return m.PeerInfo
	}
	return nil
}

func (m *ACPHeartBeat) GetSortMetric() int32 {
	if m != nil {
		return m.SortMetric
	}
	return 0
}

func (m *ACPHeartBeat) GetProcessId() int32 {
	if m != nil {
		return m.ProcessId
	}
	return 0
}

func (m *ACPHeartBeat) GetCpuMetric() int32 {
	if m != nil {
		return m.CpuMetric
	}
	return 0
}

func (m *ACPHeartBeat) GetCapacityMetric() int32 {
	if m != nil {
		return m.CapacityMetric
	}
	return 0
}

func (m *ACPHeartBeat) GetDatabase() []string {
	if m != nil {
		return m.Database
	}
	return nil
}

func (m *ACPHeartBeat) GetUptodate() bool {
	if m != nil {
		return m.Uptodate
	}
	return false
}

type ACPHeartBeatRequest struct {
	Myself               *ACPHeartBeat `protobuf:"bytes,1,opt,name=myself,proto3" json:"myself,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ACPHeartBeatRequest) Reset()         { *m = ACPHeartBeatRequest{} }
func (m *ACPHeartBeatRequest) String() string { return proto.CompactTextString(m) }
func (*ACPHeartBeatRequest) ProtoMessage()    {}
func (*ACPHeartBeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{1}
}
func (m *ACPHeartBeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPHeartBeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPHeartBeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPHeartBeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPHeartBeatRequest.Merge(dst, src)
}
func (m *ACPHeartBeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *ACPHeartBeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPHeartBeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ACPHeartBeatRequest proto.InternalMessageInfo

func (m *ACPHeartBeatRequest) GetMyself() *ACPHeartBeat {
	if m != nil {
		return m.Myself
	}
	return nil
}

type ACPHeartBeatReply struct {
	StatusCode           int32           `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMessage        string          `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	Hbinfo               []*ACPHeartBeat `protobuf:"bytes,3,rep,name=hbinfo,proto3" json:"hbinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ACPHeartBeatReply) Reset()         { *m = ACPHeartBeatReply{} }
func (m *ACPHeartBeatReply) String() string { return proto.CompactTextString(m) }
func (*ACPHeartBeatReply) ProtoMessage()    {}
func (*ACPHeartBeatReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{2}
}
func (m *ACPHeartBeatReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPHeartBeatReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPHeartBeatReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPHeartBeatReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPHeartBeatReply.Merge(dst, src)
}
func (m *ACPHeartBeatReply) XXX_Size() int {
	return m.Size()
}
func (m *ACPHeartBeatReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPHeartBeatReply.DiscardUnknown(m)
}

var xxx_messageInfo_ACPHeartBeatReply proto.InternalMessageInfo

func (m *ACPHeartBeatReply) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *ACPHeartBeatReply) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *ACPHeartBeatReply) GetHbinfo() []*ACPHeartBeat {
	if m != nil {
		return m.Hbinfo
	}
	return nil
}

type ACPY2MapDatum struct {
	Map                  string   `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	Shard                uint32   `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Key                  string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Version              uint64   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Value                []byte   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Expire               uint64   `protobuf:"varint,7,opt,name=expire,proto3" json:"expire,omitempty"`
	ConfTime             uint64   `protobuf:"varint,9,opt,name=conf_time,json=confTime,proto3" json:"conf_time,omitempty"`
	IfVersion            uint64   `protobuf:"varint,10,opt,name=if_version,json=ifVersion,proto3" json:"if_version,omitempty"`
	Location             []string `protobuf:"bytes,11,rep,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2MapDatum) Reset()         { *m = ACPY2MapDatum{} }
func (m *ACPY2MapDatum) String() string { return proto.CompactTextString(m) }
func (*ACPY2MapDatum) ProtoMessage()    {}
func (*ACPY2MapDatum) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{3}
}
func (m *ACPY2MapDatum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2MapDatum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2MapDatum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2MapDatum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2MapDatum.Merge(dst, src)
}
func (m *ACPY2MapDatum) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2MapDatum) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2MapDatum.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2MapDatum proto.InternalMessageInfo

func (m *ACPY2MapDatum) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *ACPY2MapDatum) GetShard() uint32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ACPY2MapDatum) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ACPY2MapDatum) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ACPY2MapDatum) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ACPY2MapDatum) GetExpire() uint64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *ACPY2MapDatum) GetConfTime() uint64 {
	if m != nil {
		return m.ConfTime
	}
	return 0
}

func (m *ACPY2MapDatum) GetIfVersion() uint64 {
	if m != nil {
		return m.IfVersion
	}
	return 0
}

func (m *ACPY2MapDatum) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

type ACPY2GetSet struct {
	Data                 []*ACPY2MapDatum `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ACPY2GetSet) Reset()         { *m = ACPY2GetSet{} }
func (m *ACPY2GetSet) String() string { return proto.CompactTextString(m) }
func (*ACPY2GetSet) ProtoMessage()    {}
func (*ACPY2GetSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{4}
}
func (m *ACPY2GetSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2GetSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2GetSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2GetSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2GetSet.Merge(dst, src)
}
func (m *ACPY2GetSet) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2GetSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2GetSet.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2GetSet proto.InternalMessageInfo

func (m *ACPY2GetSet) GetData() []*ACPY2MapDatum {
	if m != nil {
		return m.Data
	}
	return nil
}

type ACPY2GetRange struct {
	Map                  string   `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	Key0                 string   `protobuf:"bytes,2,opt,name=key0,proto3" json:"key0,omitempty"`
	Key1                 string   `protobuf:"bytes,3,opt,name=key1,proto3" json:"key1,omitempty"`
	Version0             uint64   `protobuf:"varint,4,opt,name=version0,proto3" json:"version0,omitempty"`
	Version1             uint64   `protobuf:"varint,5,opt,name=version1,proto3" json:"version1,omitempty"`
	Shard                uint32   `protobuf:"varint,6,opt,name=shard,proto3" json:"shard,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2GetRange) Reset()         { *m = ACPY2GetRange{} }
func (m *ACPY2GetRange) String() string { return proto.CompactTextString(m) }
func (*ACPY2GetRange) ProtoMessage()    {}
func (*ACPY2GetRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{5}
}
func (m *ACPY2GetRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2GetRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2GetRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2GetRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2GetRange.Merge(dst, src)
}
func (m *ACPY2GetRange) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2GetRange) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2GetRange.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2GetRange proto.InternalMessageInfo

func (m *ACPY2GetRange) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *ACPY2GetRange) GetKey0() string {
	if m != nil {
		return m.Key0
	}
	return ""
}

func (m *ACPY2GetRange) GetKey1() string {
	if m != nil {
		return m.Key1
	}
	return ""
}

func (m *ACPY2GetRange) GetVersion0() uint64 {
	if m != nil {
		return m.Version0
	}
	return 0
}

func (m *ACPY2GetRange) GetVersion1() uint64 {
	if m != nil {
		return m.Version1
	}
	return 0
}

func (m *ACPY2GetRange) GetShard() uint32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

type ACPY2DistRequest struct {
	Hop                  int32          `protobuf:"varint,1,opt,name=hop,proto3" json:"hop,omitempty"`
	Expire               uint64         `protobuf:"varint,2,opt,name=expire,proto3" json:"expire,omitempty"`
	Sender               string         `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Data                 *ACPY2MapDatum `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ACPY2DistRequest) Reset()         { *m = ACPY2DistRequest{} }
func (m *ACPY2DistRequest) String() string { return proto.CompactTextString(m) }
func (*ACPY2DistRequest) ProtoMessage()    {}
func (*ACPY2DistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{6}
}
func (m *ACPY2DistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2DistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2DistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2DistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2DistRequest.Merge(dst, src)
}
func (m *ACPY2DistRequest) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2DistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2DistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2DistRequest proto.InternalMessageInfo

func (m *ACPY2DistRequest) GetHop() int32 {
	if m != nil {
		return m.Hop
	}
	return 0
}

func (m *ACPY2DistRequest) GetExpire() uint64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *ACPY2DistRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ACPY2DistRequest) GetData() *ACPY2MapDatum {
	if m != nil {
		return m.Data
	}
	return nil
}

type ACPY2DistReply struct {
	StatusCode           int32    `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMessage        string   `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	ResultCode           int32    `protobuf:"varint,3,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	ConfTime             int64    `protobuf:"varint,4,opt,name=conf_time,json=confTime,proto3" json:"conf_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2DistReply) Reset()         { *m = ACPY2DistReply{} }
func (m *ACPY2DistReply) String() string { return proto.CompactTextString(m) }
func (*ACPY2DistReply) ProtoMessage()    {}
func (*ACPY2DistReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{7}
}
func (m *ACPY2DistReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2DistReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2DistReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2DistReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2DistReply.Merge(dst, src)
}
func (m *ACPY2DistReply) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2DistReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2DistReply.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2DistReply proto.InternalMessageInfo

func (m *ACPY2DistReply) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *ACPY2DistReply) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *ACPY2DistReply) GetResultCode() int32 {
	if m != nil {
		return m.ResultCode
	}
	return 0
}

func (m *ACPY2DistReply) GetConfTime() int64 {
	if m != nil {
		return m.ConfTime
	}
	return 0
}

type ACPY2CheckValue struct {
	Map                  string   `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	Treeid               uint32   `protobuf:"varint,2,opt,name=treeid,proto3" json:"treeid,omitempty"`
	Level                int32    `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Version              uint64   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Shard                uint32   `protobuf:"varint,5,opt,name=shard,proto3" json:"shard,omitempty"`
	Key                  string   `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	Hash                 []byte   `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
	Keycount             int64    `protobuf:"varint,8,opt,name=keycount,proto3" json:"keycount,omitempty"`
	Children             int32    `protobuf:"varint,9,opt,name=children,proto3" json:"children,omitempty"`
	Isvalid              bool     `protobuf:"varint,10,opt,name=isvalid,proto3" json:"isvalid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2CheckValue) Reset()         { *m = ACPY2CheckValue{} }
func (m *ACPY2CheckValue) String() string { return proto.CompactTextString(m) }
func (*ACPY2CheckValue) ProtoMessage()    {}
func (*ACPY2CheckValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{8}
}
func (m *ACPY2CheckValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2CheckValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2CheckValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2CheckValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2CheckValue.Merge(dst, src)
}
func (m *ACPY2CheckValue) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2CheckValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2CheckValue.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2CheckValue proto.InternalMessageInfo

func (m *ACPY2CheckValue) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *ACPY2CheckValue) GetTreeid() uint32 {
	if m != nil {
		return m.Treeid
	}
	return 0
}

func (m *ACPY2CheckValue) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ACPY2CheckValue) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ACPY2CheckValue) GetShard() uint32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ACPY2CheckValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ACPY2CheckValue) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ACPY2CheckValue) GetKeycount() int64 {
	if m != nil {
		return m.Keycount
	}
	return 0
}

func (m *ACPY2CheckValue) GetChildren() int32 {
	if m != nil {
		return m.Children
	}
	return 0
}

func (m *ACPY2CheckValue) GetIsvalid() bool {
	if m != nil {
		return m.Isvalid
	}
	return false
}

type ACPY2CheckRequest struct {
	Map                  string   `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	Treeid               uint32   `protobuf:"varint,2,opt,name=treeid,proto3" json:"treeid,omitempty"`
	Level                int32    `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Version              uint64   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Maxresult            int32    `protobuf:"varint,5,opt,name=maxresult,proto3" json:"maxresult,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2CheckRequest) Reset()         { *m = ACPY2CheckRequest{} }
func (m *ACPY2CheckRequest) String() string { return proto.CompactTextString(m) }
func (*ACPY2CheckRequest) ProtoMessage()    {}
func (*ACPY2CheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{9}
}
func (m *ACPY2CheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2CheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2CheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2CheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2CheckRequest.Merge(dst, src)
}
func (m *ACPY2CheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2CheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2CheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2CheckRequest proto.InternalMessageInfo

func (m *ACPY2CheckRequest) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *ACPY2CheckRequest) GetTreeid() uint32 {
	if m != nil {
		return m.Treeid
	}
	return 0
}

func (m *ACPY2CheckRequest) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ACPY2CheckRequest) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ACPY2CheckRequest) GetMaxresult() int32 {
	if m != nil {
		return m.Maxresult
	}
	return 0
}

type ACPY2CheckReply struct {
	Check                []*ACPY2CheckValue `protobuf:"bytes,1,rep,name=check,proto3" json:"check,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ACPY2CheckReply) Reset()         { *m = ACPY2CheckReply{} }
func (m *ACPY2CheckReply) String() string { return proto.CompactTextString(m) }
func (*ACPY2CheckReply) ProtoMessage()    {}
func (*ACPY2CheckReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{10}
}
func (m *ACPY2CheckReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2CheckReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2CheckReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2CheckReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2CheckReply.Merge(dst, src)
}
func (m *ACPY2CheckReply) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2CheckReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2CheckReply.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2CheckReply proto.InternalMessageInfo

func (m *ACPY2CheckReply) GetCheck() []*ACPY2CheckValue {
	if m != nil {
		return m.Check
	}
	return nil
}

type ACPY2RingConfReq struct {
	Map                  string   `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	Datacenter           string   `protobuf:"bytes,2,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2RingConfReq) Reset()         { *m = ACPY2RingConfReq{} }
func (m *ACPY2RingConfReq) String() string { return proto.CompactTextString(m) }
func (*ACPY2RingConfReq) ProtoMessage()    {}
func (*ACPY2RingConfReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{11}
}
func (m *ACPY2RingConfReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2RingConfReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2RingConfReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2RingConfReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2RingConfReq.Merge(dst, src)
}
func (m *ACPY2RingConfReq) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2RingConfReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2RingConfReq.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2RingConfReq proto.InternalMessageInfo

func (m *ACPY2RingConfReq) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *ACPY2RingConfReq) GetDatacenter() string {
	if m != nil {
		return m.Datacenter
	}
	return ""
}

type ACPY2RingPart struct {
	Shard                uint32   `protobuf:"varint,1,opt,name=shard,proto3" json:"shard,omitempty"`
	Server               []string `protobuf:"bytes,2,rep,name=server,proto3" json:"server,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2RingPart) Reset()         { *m = ACPY2RingPart{} }
func (m *ACPY2RingPart) String() string { return proto.CompactTextString(m) }
func (*ACPY2RingPart) ProtoMessage()    {}
func (*ACPY2RingPart) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{12}
}
func (m *ACPY2RingPart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2RingPart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2RingPart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2RingPart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2RingPart.Merge(dst, src)
}
func (m *ACPY2RingPart) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2RingPart) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2RingPart.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2RingPart proto.InternalMessageInfo

func (m *ACPY2RingPart) GetShard() uint32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ACPY2RingPart) GetServer() []string {
	if m != nil {
		return m.Server
	}
	return nil
}

type ACPY2RingConfReply struct {
	Version              uint64           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	IsStable             bool             `protobuf:"varint,2,opt,name=is_stable,json=isStable,proto3" json:"is_stable,omitempty"`
	Part                 []*ACPY2RingPart `protobuf:"bytes,3,rep,name=part,proto3" json:"part,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ACPY2RingConfReply) Reset()         { *m = ACPY2RingConfReply{} }
func (m *ACPY2RingConfReply) String() string { return proto.CompactTextString(m) }
func (*ACPY2RingConfReply) ProtoMessage()    {}
func (*ACPY2RingConfReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{13}
}
func (m *ACPY2RingConfReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2RingConfReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2RingConfReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2RingConfReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2RingConfReply.Merge(dst, src)
}
func (m *ACPY2RingConfReply) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2RingConfReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2RingConfReply.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2RingConfReply proto.InternalMessageInfo

func (m *ACPY2RingConfReply) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ACPY2RingConfReply) GetIsStable() bool {
	if m != nil {
		return m.IsStable
	}
	return false
}

func (m *ACPY2RingConfReply) GetPart() []*ACPY2RingPart {
	if m != nil {
		return m.Part
	}
	return nil
}

type ACPY2ServerRequest struct {
	Subsystem            string   `protobuf:"bytes,1,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
	Environment          string   `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	Hostname             string   `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Datacenter           string   `protobuf:"bytes,4,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	ServerId             string   `protobuf:"bytes,5,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2ServerRequest) Reset()         { *m = ACPY2ServerRequest{} }
func (m *ACPY2ServerRequest) String() string { return proto.CompactTextString(m) }
func (*ACPY2ServerRequest) ProtoMessage()    {}
func (*ACPY2ServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{14}
}
func (m *ACPY2ServerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2ServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2ServerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2ServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2ServerRequest.Merge(dst, src)
}
func (m *ACPY2ServerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2ServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2ServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2ServerRequest proto.InternalMessageInfo

func (m *ACPY2ServerRequest) GetSubsystem() string {
	if m != nil {
		return m.Subsystem
	}
	return ""
}

func (m *ACPY2ServerRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ACPY2ServerRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ACPY2ServerRequest) GetDatacenter() string {
	if m != nil {
		return m.Datacenter
	}
	return ""
}

func (m *ACPY2ServerRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

type ACPY2ServerData struct {
	Subsystem            string            `protobuf:"bytes,1,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
	Environment          string            `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	Hostname             string            `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Datacenter           string            `protobuf:"bytes,4,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	Rack                 string            `protobuf:"bytes,5,opt,name=rack,proto3" json:"rack,omitempty"`
	ServerId             string            `protobuf:"bytes,6,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	NetInfo              []*kibitz.NetInfo `protobuf:"bytes,7,rep,name=net_info,json=netInfo,proto3" json:"net_info,omitempty"`
	IsUp                 bool              `protobuf:"varint,8,opt,name=is_up,json=isUp,proto3" json:"is_up,omitempty"`
	IsLocal              bool              `protobuf:"varint,9,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	SortMetric           int32             `protobuf:"varint,10,opt,name=sort_metric,json=sortMetric,proto3" json:"sort_metric,omitempty"`
	CpuMetric            int32             `protobuf:"varint,11,opt,name=cpu_metric,json=cpuMetric,proto3" json:"cpu_metric,omitempty"`
	CapacityMetric       int32             `protobuf:"varint,12,opt,name=capacity_metric,json=capacityMetric,proto3" json:"capacity_metric,omitempty"`
	Database             []string          `protobuf:"bytes,14,rep,name=database,proto3" json:"database,omitempty"`
	Uptodate             bool              `protobuf:"varint,15,opt,name=uptodate,proto3" json:"uptodate,omitempty"`
	TimeLastUp           uint64            `protobuf:"varint,16,opt,name=time_last_up,json=timeLastUp,proto3" json:"time_last_up,omitempty"`
	TimeUpSince          uint64            `protobuf:"varint,17,opt,name=time_up_since,json=timeUpSince,proto3" json:"time_up_since,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ACPY2ServerData) Reset()         { *m = ACPY2ServerData{} }
func (m *ACPY2ServerData) String() string { return proto.CompactTextString(m) }
func (*ACPY2ServerData) ProtoMessage()    {}
func (*ACPY2ServerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{15}
}
func (m *ACPY2ServerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2ServerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2ServerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2ServerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2ServerData.Merge(dst, src)
}
func (m *ACPY2ServerData) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2ServerData) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2ServerData.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2ServerData proto.InternalMessageInfo

func (m *ACPY2ServerData) GetSubsystem() string {
	if m != nil {
		return m.Subsystem
	}
	return ""
}

func (m *ACPY2ServerData) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ACPY2ServerData) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ACPY2ServerData) GetDatacenter() string {
	if m != nil {
		return m.Datacenter
	}
	return ""
}

func (m *ACPY2ServerData) GetRack() string {
	if m != nil {
		return m.Rack
	}
	return ""
}

func (m *ACPY2ServerData) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *ACPY2ServerData) GetNetInfo() []*kibitz.NetInfo {
	if m != nil {
		return m.NetInfo
	}
	return nil
}

func (m *ACPY2ServerData) GetIsUp() bool {
	if m != nil {
		return m.IsUp
	}
	return false
}

func (m *ACPY2ServerData) GetIsLocal() bool {
	if m != nil {
		return m.IsLocal
	}
	return false
}

func (m *ACPY2ServerData) GetSortMetric() int32 {
	if m != nil {
		return m.SortMetric
	}
	return 0
}

func (m *ACPY2ServerData) GetCpuMetric() int32 {
	if m != nil {
		return m.CpuMetric
	}
	return 0
}

func (m *ACPY2ServerData) GetCapacityMetric() int32 {
	if m != nil {
		return m.CapacityMetric
	}
	return 0
}

func (m *ACPY2ServerData) GetDatabase() []string {
	if m != nil {
		return m.Database
	}
	return nil
}

func (m *ACPY2ServerData) GetUptodate() bool {
	if m != nil {
		return m.Uptodate
	}
	return false
}

func (m *ACPY2ServerData) GetTimeLastUp() uint64 {
	if m != nil {
		return m.TimeLastUp
	}
	return 0
}

func (m *ACPY2ServerData) GetTimeUpSince() uint64 {
	if m != nil {
		return m.TimeUpSince
	}
	return 0
}

type ACPY2ServerReply struct {
	Data                 []*ACPY2ServerData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ACPY2ServerReply) Reset()         { *m = ACPY2ServerReply{} }
func (m *ACPY2ServerReply) String() string { return proto.CompactTextString(m) }
func (*ACPY2ServerReply) ProtoMessage()    {}
func (*ACPY2ServerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{16}
}
func (m *ACPY2ServerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2ServerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2ServerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2ServerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2ServerReply.Merge(dst, src)
}
func (m *ACPY2ServerReply) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2ServerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2ServerReply.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2ServerReply proto.InternalMessageInfo

func (m *ACPY2ServerReply) GetData() []*ACPY2ServerData {
	if m != nil {
		return m.Data
	}
	return nil
}

type ACPY2Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2Empty) Reset()         { *m = ACPY2Empty{} }
func (m *ACPY2Empty) String() string { return proto.CompactTextString(m) }
func (*ACPY2Empty) ProtoMessage()    {}
func (*ACPY2Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_5f77036a7da0ce58, []int{17}
}
func (m *ACPY2Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2Empty.Merge(dst, src)
}
func (m *ACPY2Empty) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2Empty.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ACPHeartBeat)(nil), "acproto.ACPHeartBeat")
	proto.RegisterType((*ACPHeartBeatRequest)(nil), "acproto.ACPHeartBeatRequest")
	proto.RegisterType((*ACPHeartBeatReply)(nil), "acproto.ACPHeartBeatReply")
	proto.RegisterType((*ACPY2MapDatum)(nil), "acproto.ACPY2MapDatum")
	proto.RegisterType((*ACPY2GetSet)(nil), "acproto.ACPY2GetSet")
	proto.RegisterType((*ACPY2GetRange)(nil), "acproto.ACPY2GetRange")
	proto.RegisterType((*ACPY2DistRequest)(nil), "acproto.ACPY2DistRequest")
	proto.RegisterType((*ACPY2DistReply)(nil), "acproto.ACPY2DistReply")
	proto.RegisterType((*ACPY2CheckValue)(nil), "acproto.ACPY2CheckValue")
	proto.RegisterType((*ACPY2CheckRequest)(nil), "acproto.ACPY2CheckRequest")
	proto.RegisterType((*ACPY2CheckReply)(nil), "acproto.ACPY2CheckReply")
	proto.RegisterType((*ACPY2RingConfReq)(nil), "acproto.ACPY2RingConfReq")
	proto.RegisterType((*ACPY2RingPart)(nil), "acproto.ACPY2RingPart")
	proto.RegisterType((*ACPY2RingConfReply)(nil), "acproto.ACPY2RingConfReply")
	proto.RegisterType((*ACPY2ServerRequest)(nil), "acproto.ACPY2ServerRequest")
	proto.RegisterType((*ACPY2ServerData)(nil), "acproto.ACPY2ServerData")
	proto.RegisterType((*ACPY2ServerReply)(nil), "acproto.ACPY2ServerReply")
	proto.RegisterType((*ACPY2Empty)(nil), "acproto.ACPY2Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ACrpcClient is the client API for ACrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ACrpcClient interface {
	SendHB(ctx context.Context, in *ACPHeartBeatRequest, opts ...grpc.CallOption) (*ACPHeartBeatReply, error)
	GetMerkle(ctx context.Context, in *ACPY2CheckRequest, opts ...grpc.CallOption) (*ACPY2CheckReply, error)
	Get(ctx context.Context, in *ACPY2GetSet, opts ...grpc.CallOption) (*ACPY2GetSet, error)
	Put(ctx context.Context, in *ACPY2DistRequest, opts ...grpc.CallOption) (*ACPY2DistReply, error)
	Range(ctx context.Context, in *ACPY2GetRange, opts ...grpc.CallOption) (*ACPY2GetSet, error)
	RingConf(ctx context.Context, in *ACPY2RingConfReq, opts ...grpc.CallOption) (*ACPY2RingConfReply, error)
	Servers(ctx context.Context, in *ACPY2ServerRequest, opts ...grpc.CallOption) (*ACPY2ServerReply, error)
	ShutDown(ctx context.Context, in *ACPY2Empty, opts ...grpc.CallOption) (*ACPHeartBeatReply, error)
}

type aCrpcClient struct {
	cc *grpc.ClientConn
}

func NewACrpcClient(cc *grpc.ClientConn) ACrpcClient {
	return &aCrpcClient{cc}
}

func (c *aCrpcClient) SendHB(ctx context.Context, in *ACPHeartBeatRequest, opts ...grpc.CallOption) (*ACPHeartBeatReply, error) {
	out := new(ACPHeartBeatReply)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/SendHB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) GetMerkle(ctx context.Context, in *ACPY2CheckRequest, opts ...grpc.CallOption) (*ACPY2CheckReply, error) {
	out := new(ACPY2CheckReply)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/GetMerkle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) Get(ctx context.Context, in *ACPY2GetSet, opts ...grpc.CallOption) (*ACPY2GetSet, error) {
	out := new(ACPY2GetSet)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) Put(ctx context.Context, in *ACPY2DistRequest, opts ...grpc.CallOption) (*ACPY2DistReply, error) {
	out := new(ACPY2DistReply)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) Range(ctx context.Context, in *ACPY2GetRange, opts ...grpc.CallOption) (*ACPY2GetSet, error) {
	out := new(ACPY2GetSet)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/Range", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) RingConf(ctx context.Context, in *ACPY2RingConfReq, opts ...grpc.CallOption) (*ACPY2RingConfReply, error) {
	out := new(ACPY2RingConfReply)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/RingConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) Servers(ctx context.Context, in *ACPY2ServerRequest, opts ...grpc.CallOption) (*ACPY2ServerReply, error) {
	out := new(ACPY2ServerReply)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/Servers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) ShutDown(ctx context.Context, in *ACPY2Empty, opts ...grpc.CallOption) (*ACPHeartBeatReply, error) {
	out := new(ACPHeartBeatReply)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/ShutDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACrpcServer is the server API for ACrpc service.
type ACrpcServer interface {
	SendHB(context.Context, *ACPHeartBeatRequest) (*ACPHeartBeatReply, error)
	GetMerkle(context.Context, *ACPY2CheckRequest) (*ACPY2CheckReply, error)
	Get(context.Context, *ACPY2GetSet) (*ACPY2GetSet, error)
	Put(context.Context, *ACPY2DistRequest) (*ACPY2DistReply, error)
	Range(context.Context, *ACPY2GetRange) (*ACPY2GetSet, error)
	RingConf(context.Context, *ACPY2RingConfReq) (*ACPY2RingConfReply, error)
	Servers(context.Context, *ACPY2ServerRequest) (*ACPY2ServerReply, error)
	ShutDown(context.Context, *ACPY2Empty) (*ACPHeartBeatReply, error)
}

func RegisterACrpcServer(s *grpc.Server, srv ACrpcServer) {
	s.RegisterService(&_ACrpc_serviceDesc, srv)
}

func _ACrpc_SendHB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPHeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).SendHB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/SendHB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).SendHB(ctx, req.(*ACPHeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_GetMerkle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).GetMerkle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/GetMerkle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).GetMerkle(ctx, req.(*ACPY2CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2GetSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).Get(ctx, req.(*ACPY2GetSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2DistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).Put(ctx, req.(*ACPY2DistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_Range_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2GetRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).Range(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/Range",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).Range(ctx, req.(*ACPY2GetRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_RingConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2RingConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).RingConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/RingConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).RingConf(ctx, req.(*ACPY2RingConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_Servers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).Servers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/Servers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).Servers(ctx, req.(*ACPY2ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_ShutDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).ShutDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/ShutDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).ShutDown(ctx, req.(*ACPY2Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ACrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "acproto.ACrpc",
	HandlerType: (*ACrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendHB",
			Handler:    _ACrpc_SendHB_Handler,
		},
		{
			MethodName: "GetMerkle",
			Handler:    _ACrpc_GetMerkle_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ACrpc_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _ACrpc_Put_Handler,
		},
		{
			MethodName: "Range",
			Handler:    _ACrpc_Range_Handler,
		},
		{
			MethodName: "RingConf",
			Handler:    _ACrpc_RingConf_Handler,
		},
		{
			MethodName: "Servers",
			Handler:    _ACrpc_Servers_Handler,
		},
		{
			MethodName: "ShutDown",
			Handler:    _ACrpc_ShutDown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "achb.proto",
}

func (m *ACPHeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPHeartBeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PeerInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.PeerInfo.Size()))
		n1, err := m.PeerInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.SortMetric != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.SortMetric))
	}
	if m.ProcessId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.ProcessId))
	}
	if m.CpuMetric != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.CpuMetric))
	}
	if m.CapacityMetric != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.CapacityMetric))
	}
	if len(m.Database) > 0 {
		for _, s := range m.Database {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Uptodate {
		dAtA[i] = 0x38
		i++
		if m.Uptodate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPHeartBeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPHeartBeatRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Myself != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Myself.Size()))
		n2, err := m.Myself.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPHeartBeatReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPHeartBeatReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.StatusCode))
	}
	if len(m.StatusMessage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.StatusMessage)))
		i += copy(dAtA[i:], m.StatusMessage)
	}
	if len(m.Hbinfo) > 0 {
		for _, msg := range m.Hbinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAchb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2MapDatum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2MapDatum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Map)))
		i += copy(dAtA[i:], m.Map)
	}
	if m.Shard != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Shard))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Version != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Version))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Expire != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Expire))
	}
	if m.ConfTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.ConfTime))
	}
	if m.IfVersion != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.IfVersion))
	}
	if len(m.Location) > 0 {
		for _, s := range m.Location {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2GetSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2GetSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAchb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2GetRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2GetRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Map)))
		i += copy(dAtA[i:], m.Map)
	}
	if len(m.Key0) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Key0)))
		i += copy(dAtA[i:], m.Key0)
	}
	if len(m.Key1) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Key1)))
		i += copy(dAtA[i:], m.Key1)
	}
	if m.Version0 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Version0))
	}
	if m.Version1 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Version1))
	}
	if m.Shard != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Shard))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2DistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2DistRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hop != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Hop))
	}
	if m.Expire != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Expire))
	}
	if len(m.Sender) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Sender)))
		i += copy(dAtA[i:], m.Sender)
	}
	if m.Data != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2DistReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2DistReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.StatusCode))
	}
	if len(m.StatusMessage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.StatusMessage)))
		i += copy(dAtA[i:], m.StatusMessage)
	}
	if m.ResultCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.ResultCode))
	}
	if m.ConfTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.ConfTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2CheckValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2CheckValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Map)))
		i += copy(dAtA[i:], m.Map)
	}
	if m.Treeid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Treeid))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Level))
	}
	if m.Version != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Version))
	}
	if m.Shard != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Shard))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Keycount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Keycount))
	}
	if m.Children != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Children))
	}
	if m.Isvalid {
		dAtA[i] = 0x50
		i++
		if m.Isvalid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2CheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2CheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Map)))
		i += copy(dAtA[i:], m.Map)
	}
	if m.Treeid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Treeid))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Level))
	}
	if m.Version != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Version))
	}
	if m.Maxresult != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Maxresult))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2CheckReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2CheckReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Check) > 0 {
		for _, msg := range m.Check {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAchb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2RingConfReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2RingConfReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Map)))
		i += copy(dAtA[i:], m.Map)
	}
	if len(m.Datacenter) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Datacenter)))
		i += copy(dAtA[i:], m.Datacenter)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2RingPart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2RingPart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Shard != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Shard))
	}
	if len(m.Server) > 0 {
		for _, s := range m.Server {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2RingConfReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2RingConfReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Version))
	}
	if m.IsStable {
		dAtA[i] = 0x10
		i++
		if m.IsStable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Part) > 0 {
		for _, msg := range m.Part {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAchb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2ServerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2ServerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subsystem) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Subsystem)))
		i += copy(dAtA[i:], m.Subsystem)
	}
	if len(m.Environment) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Environment)))
		i += copy(dAtA[i:], m.Environment)
	}
	if len(m.Hostname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.Datacenter) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Datacenter)))
		i += copy(dAtA[i:], m.Datacenter)
	}
	if len(m.ServerId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.ServerId)))
		i += copy(dAtA[i:], m.ServerId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2ServerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2ServerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subsystem) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Subsystem)))
		i += copy(dAtA[i:], m.Subsystem)
	}
	if len(m.Environment) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Environment)))
		i += copy(dAtA[i:], m.Environment)
	}
	if len(m.Hostname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.Datacenter) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Datacenter)))
		i += copy(dAtA[i:], m.Datacenter)
	}
	if len(m.Rack) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Rack)))
		i += copy(dAtA[i:], m.Rack)
	}
	if len(m.ServerId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.ServerId)))
		i += copy(dAtA[i:], m.ServerId)
	}
	if len(m.NetInfo) > 0 {
		for _, msg := range m.NetInfo {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintAchb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsUp {
		dAtA[i] = 0x40
		i++
		if m.IsUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsLocal {
		dAtA[i] = 0x48
		i++
		if m.IsLocal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SortMetric != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.SortMetric))
	}
	if m.CpuMetric != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.CpuMetric))
	}
	if m.CapacityMetric != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.CapacityMetric))
	}
	if len(m.Database) > 0 {
		for _, s := range m.Database {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Uptodate {
		dAtA[i] = 0x78
		i++
		if m.Uptodate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TimeLastUp != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.TimeLastUp))
	}
	if m.TimeUpSince != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.TimeUpSince))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2ServerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2ServerReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAchb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAchb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ACPHeartBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerInfo != nil {
		l = m.PeerInfo.Size()
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.SortMetric != 0 {
		n += 1 + sovAchb(uint64(m.SortMetric))
	}
	if m.ProcessId != 0 {
		n += 1 + sovAchb(uint64(m.ProcessId))
	}
	if m.CpuMetric != 0 {
		n += 1 + sovAchb(uint64(m.CpuMetric))
	}
	if m.CapacityMetric != 0 {
		n += 1 + sovAchb(uint64(m.CapacityMetric))
	}
	if len(m.Database) > 0 {
		for _, s := range m.Database {
			l = len(s)
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.Uptodate {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPHeartBeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Myself != nil {
		l = m.Myself.Size()
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPHeartBeatReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusCode != 0 {
		n += 1 + sovAchb(uint64(m.StatusCode))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	if len(m.Hbinfo) > 0 {
		for _, e := range m.Hbinfo {
			l = e.Size()
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2MapDatum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Map)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Shard != 0 {
		n += 1 + sovAchb(uint64(m.Shard))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovAchb(uint64(m.Version))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Expire != 0 {
		n += 1 + sovAchb(uint64(m.Expire))
	}
	if m.ConfTime != 0 {
		n += 1 + sovAchb(uint64(m.ConfTime))
	}
	if m.IfVersion != 0 {
		n += 1 + sovAchb(uint64(m.IfVersion))
	}
	if len(m.Location) > 0 {
		for _, s := range m.Location {
			l = len(s)
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2GetSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2GetRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Map)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	l = len(m.Key0)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	l = len(m.Key1)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Version0 != 0 {
		n += 1 + sovAchb(uint64(m.Version0))
	}
	if m.Version1 != 0 {
		n += 1 + sovAchb(uint64(m.Version1))
	}
	if m.Shard != 0 {
		n += 1 + sovAchb(uint64(m.Shard))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2DistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hop != 0 {
		n += 1 + sovAchb(uint64(m.Hop))
	}
	if m.Expire != 0 {
		n += 1 + sovAchb(uint64(m.Expire))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2DistReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusCode != 0 {
		n += 1 + sovAchb(uint64(m.StatusCode))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.ResultCode != 0 {
		n += 1 + sovAchb(uint64(m.ResultCode))
	}
	if m.ConfTime != 0 {
		n += 1 + sovAchb(uint64(m.ConfTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2CheckValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Map)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Treeid != 0 {
		n += 1 + sovAchb(uint64(m.Treeid))
	}
	if m.Level != 0 {
		n += 1 + sovAchb(uint64(m.Level))
	}
	if m.Version != 0 {
		n += 1 + sovAchb(uint64(m.Version))
	}
	if m.Shard != 0 {
		n += 1 + sovAchb(uint64(m.Shard))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Keycount != 0 {
		n += 1 + sovAchb(uint64(m.Keycount))
	}
	if m.Children != 0 {
		n += 1 + sovAchb(uint64(m.Children))
	}
	if m.Isvalid {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2CheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Map)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Treeid != 0 {
		n += 1 + sovAchb(uint64(m.Treeid))
	}
	if m.Level != 0 {
		n += 1 + sovAchb(uint64(m.Level))
	}
	if m.Version != 0 {
		n += 1 + sovAchb(uint64(m.Version))
	}
	if m.Maxresult != 0 {
		n += 1 + sovAchb(uint64(m.Maxresult))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2CheckReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Check) > 0 {
		for _, e := range m.Check {
			l = e.Size()
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2RingConfReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Map)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	l = len(m.Datacenter)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2RingPart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shard != 0 {
		n += 1 + sovAchb(uint64(m.Shard))
	}
	if len(m.Server) > 0 {
		for _, s := range m.Server {
			l = len(s)
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2RingConfReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovAchb(uint64(m.Version))
	}
	if m.IsStable {
		n += 2
	}
	if len(m.Part) > 0 {
		for _, e := range m.Part {
			l = e.Size()
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2ServerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subsystem)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	l = len(m.Datacenter)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2ServerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subsystem)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	l = len(m.Datacenter)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	l = len(m.Rack)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovAchb(uint64(l))
	}
	if len(m.NetInfo) > 0 {
		for _, e := range m.NetInfo {
			l = e.Size()
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.IsUp {
		n += 2
	}
	if m.IsLocal {
		n += 2
	}
	if m.SortMetric != 0 {
		n += 1 + sovAchb(uint64(m.SortMetric))
	}
	if m.CpuMetric != 0 {
		n += 1 + sovAchb(uint64(m.CpuMetric))
	}
	if m.CapacityMetric != 0 {
		n += 1 + sovAchb(uint64(m.CapacityMetric))
	}
	if len(m.Database) > 0 {
		for _, s := range m.Database {
			l = len(s)
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.Uptodate {
		n += 2
	}
	if m.TimeLastUp != 0 {
		n += 2 + sovAchb(uint64(m.TimeLastUp))
	}
	if m.TimeUpSince != 0 {
		n += 2 + sovAchb(uint64(m.TimeUpSince))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2ServerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAchb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAchb(x uint64) (n int) {
	return sovAchb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ACPHeartBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPHeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPHeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerInfo == nil {
				m.PeerInfo = &kibitz.PeerInfo{}
			}
			if err := m.PeerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortMetric", wireType)
			}
			m.SortMetric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortMetric |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessId", wireType)
			}
			m.ProcessId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuMetric", wireType)
			}
			m.CpuMetric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuMetric |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapacityMetric", wireType)
			}
			m.CapacityMetric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CapacityMetric |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = append(m.Database, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptodate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uptodate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPHeartBeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPHeartBeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPHeartBeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Myself", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Myself == nil {
				m.Myself = &ACPHeartBeat{}
			}
			if err := m.Myself.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPHeartBeatReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPHeartBeatReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPHeartBeatReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hbinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hbinfo = append(m.Hbinfo, &ACPHeartBeat{})
			if err := m.Hbinfo[len(m.Hbinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2MapDatum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2MapDatum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2MapDatum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfTime", wireType)
			}
			m.ConfTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfVersion", wireType)
			}
			m.IfVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IfVersion |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = append(m.Location, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2GetSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2GetSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2GetSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ACPY2MapDatum{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2GetRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2GetRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2GetRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version0", wireType)
			}
			m.Version0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version0 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version1", wireType)
			}
			m.Version1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version1 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2DistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2DistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2DistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hop", wireType)
			}
			m.Hop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hop |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ACPY2MapDatum{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2DistReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2DistReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2DistReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfTime", wireType)
			}
			m.ConfTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2CheckValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2CheckValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2CheckValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treeid", wireType)
			}
			m.Treeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Treeid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keycount", wireType)
			}
			m.Keycount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keycount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			m.Children = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Children |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isvalid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isvalid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2CheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2CheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2CheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treeid", wireType)
			}
			m.Treeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Treeid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxresult", wireType)
			}
			m.Maxresult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxresult |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2CheckReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2CheckReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2CheckReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Check = append(m.Check, &ACPY2CheckValue{})
			if err := m.Check[len(m.Check)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2RingConfReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2RingConfReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2RingConfReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datacenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datacenter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2RingPart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2RingPart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2RingPart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = append(m.Server, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2RingConfReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2RingConfReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2RingConfReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Part = append(m.Part, &ACPY2RingPart{})
			if err := m.Part[len(m.Part)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2ServerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2ServerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2ServerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subsystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datacenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datacenter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2ServerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2ServerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2ServerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subsystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datacenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datacenter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetInfo = append(m.NetInfo, &kibitz.NetInfo{})
			if err := m.NetInfo[len(m.NetInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUp = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLocal = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortMetric", wireType)
			}
			m.SortMetric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortMetric |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuMetric", wireType)
			}
			m.CpuMetric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuMetric |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapacityMetric", wireType)
			}
			m.CapacityMetric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CapacityMetric |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = append(m.Database, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptodate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uptodate = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLastUp", wireType)
			}
			m.TimeLastUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeLastUp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeUpSince", wireType)
			}
			m.TimeUpSince = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeUpSince |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2ServerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2ServerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2ServerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ACPY2ServerData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAchb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAchb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAchb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAchb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAchb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAchb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("achb.proto", fileDescriptor_achb_5f77036a7da0ce58) }

var fileDescriptor_achb_5f77036a7da0ce58 = []byte{
	// 1277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4b, 0x8f, 0x1b, 0x45,
	0x10, 0xce, 0xc4, 0x8f, 0x9d, 0x29, 0xef, 0x2b, 0x9d, 0xb0, 0x38, 0xde, 0xb0, 0x31, 0x23, 0x21,
	0x56, 0x11, 0x38, 0xaf, 0x03, 0x42, 0x28, 0x12, 0x1b, 0x1b, 0x6d, 0x22, 0x65, 0xd1, 0x6a, 0x96,
	0x44, 0xe2, 0x64, 0xb5, 0x67, 0xca, 0xeb, 0xc6, 0xf3, 0xca, 0x74, 0xcf, 0x26, 0xe6, 0x04, 0x27,
	0x24, 0xb8, 0x03, 0x7f, 0x82, 0xff, 0xc1, 0x91, 0x9f, 0x80, 0xc2, 0x89, 0x9f, 0xc0, 0x01, 0x09,
	0xf5, 0x63, 0xec, 0x19, 0xc7, 0xbb, 0x70, 0x00, 0x71, 0xeb, 0x7a, 0x4c, 0x75, 0xd5, 0xf7, 0x55,
	0xf5, 0x14, 0x00, 0xf5, 0x27, 0xa3, 0x5e, 0x9a, 0x25, 0x22, 0x21, 0x6b, 0xd4, 0x57, 0x87, 0xce,
	0xdb, 0xa7, 0x4c, 0x4c, 0xf2, 0x51, 0xcf, 0x4f, 0xa2, 0xdb, 0x5f, 0xd0, 0x17, 0x77, 0x6e, 0x4f,
	0xd9, 0x88, 0x89, 0x2f, 0x6f, 0xa7, 0x88, 0x99, 0xf6, 0x75, 0xff, 0xb4, 0x60, 0xfd, 0xa0, 0x7f,
	0xfc, 0x08, 0x69, 0x26, 0x1e, 0x22, 0x15, 0xe4, 0x7d, 0x70, 0xa4, 0x79, 0xc8, 0xe2, 0x71, 0xd2,
	0xb6, 0xba, 0xd6, 0x7e, 0xeb, 0xde, 0x76, 0x4f, 0x7f, 0xd7, 0x3b, 0x46, 0xcc, 0x1e, 0xc7, 0xe3,
	0xc4, 0xb3, 0x53, 0x73, 0x22, 0x37, 0xa1, 0xc5, 0x93, 0x4c, 0x0c, 0x23, 0x14, 0x19, 0xf3, 0xdb,
	0x97, 0xbb, 0xd6, 0x7e, 0xc3, 0x03, 0xa9, 0x3a, 0x52, 0x1a, 0xf2, 0x16, 0x40, 0x9a, 0x25, 0x3e,
	0x72, 0x3e, 0x64, 0x41, 0xbb, 0xa6, 0xec, 0x8e, 0xd1, 0x3c, 0x0e, 0xa4, 0xd9, 0x4f, 0xf3, 0xe2,
	0xf3, 0xba, 0x36, 0xfb, 0x69, 0x6e, 0xbe, 0x7e, 0x17, 0xb6, 0x7c, 0x9a, 0x52, 0x9f, 0x89, 0x59,
	0xe1, 0xd3, 0x50, 0x3e, 0x9b, 0x85, 0xda, 0x38, 0x76, 0xc0, 0x0e, 0xa8, 0xa0, 0x23, 0xca, 0xb1,
	0xdd, 0xec, 0xd6, 0xf6, 0x1d, 0x6f, 0x2e, 0x4b, 0x5b, 0x9e, 0x8a, 0x24, 0xa0, 0x02, 0xdb, 0x6b,
	0x5d, 0x6b, 0xdf, 0xf6, 0xe6, 0xb2, 0x3b, 0x80, 0xab, 0xe5, 0xf2, 0x3d, 0x7c, 0x9e, 0x23, 0x97,
	0x28, 0x34, 0xa3, 0x19, 0xc7, 0x70, 0x6c, 0x20, 0x78, 0xa3, 0x67, 0x30, 0xed, 0x55, 0xbc, 0x8d,
	0x93, 0xfb, 0xad, 0x05, 0x57, 0xaa, 0x61, 0xd2, 0x70, 0xa6, 0xb0, 0x11, 0x54, 0xe4, 0x7c, 0xe8,
	0x27, 0x01, 0xaa, 0x48, 0x12, 0x1b, 0xa5, 0xea, 0x27, 0x01, 0x92, 0x77, 0x60, 0xd3, 0x38, 0x44,
	0xc8, 0x39, 0x3d, 0x45, 0x85, 0x9f, 0xe3, 0x6d, 0x68, 0xed, 0x91, 0x56, 0xca, 0x64, 0x26, 0x23,
	0xc5, 0x47, 0xad, 0x5b, 0xbb, 0x20, 0x19, 0xed, 0xe4, 0xfe, 0x6e, 0xc1, 0xc6, 0x41, 0xff, 0xf8,
	0xf3, 0x7b, 0x47, 0x34, 0x1d, 0x50, 0x91, 0x47, 0x64, 0x1b, 0x6a, 0x11, 0x4d, 0x55, 0x02, 0x8e,
	0x27, 0x8f, 0xe4, 0x1a, 0x34, 0xf8, 0x84, 0x66, 0x81, 0xba, 0x70, 0xc3, 0xd3, 0x82, 0xf4, 0x9b,
	0xe2, 0x4c, 0x91, 0xe4, 0x78, 0xf2, 0x48, 0xda, 0xb0, 0x76, 0x86, 0x19, 0x67, 0x49, 0xac, 0xb8,
	0xa9, 0x7b, 0x85, 0x28, 0x23, 0x9c, 0xd1, 0x30, 0x47, 0xc5, 0xc7, 0xba, 0xa7, 0x05, 0xb2, 0x03,
	0x4d, 0x7c, 0x99, 0xb2, 0x4c, 0x03, 0x5d, 0xf7, 0x8c, 0x44, 0x76, 0xc1, 0xf1, 0x93, 0x78, 0x3c,
	0x14, 0x2c, 0xc2, 0xb6, 0xa3, 0x4c, 0xb6, 0x54, 0x7c, 0xc6, 0x22, 0x94, 0x3d, 0xc0, 0xc6, 0xc3,
	0xe2, 0x1e, 0x50, 0x56, 0x87, 0x8d, 0x9f, 0x99, 0x9b, 0x3a, 0x60, 0x87, 0x89, 0x4f, 0x85, 0x34,
	0xb6, 0x34, 0xb5, 0x85, 0xec, 0x7e, 0x08, 0x2d, 0x55, 0xea, 0x21, 0x8a, 0x13, 0x14, 0xe4, 0x16,
	0xd4, 0x25, 0xeb, 0x6d, 0x4b, 0xe1, 0xb4, 0x53, 0xc6, 0x69, 0x01, 0x87, 0xa7, 0x7c, 0xdc, 0x1f,
	0x0a, 0x98, 0x0e, 0x51, 0x78, 0x34, 0x3e, 0xc5, 0x15, 0x30, 0x11, 0xa8, 0x4f, 0x71, 0x76, 0xc7,
	0xd0, 0xa2, 0xce, 0x46, 0x77, 0xd7, 0xa0, 0xa4, 0xce, 0x32, 0x45, 0x93, 0xfe, 0x1d, 0x83, 0xd3,
	0x5c, 0x2e, 0xd9, 0xee, 0x2a, 0xac, 0x16, 0xb6, 0xbb, 0x0b, 0x1a, 0x9a, 0x25, 0x1a, 0xdc, 0xaf,
	0x2c, 0xd8, 0x56, 0x99, 0x0d, 0x18, 0x9f, 0x77, 0xe4, 0x36, 0xd4, 0x26, 0x49, 0x6a, 0x9a, 0x48,
	0x1e, 0x4b, 0x58, 0x5f, 0xae, 0x60, 0xbd, 0x03, 0x4d, 0x8e, 0x71, 0x80, 0x99, 0x49, 0xd1, 0x48,
	0x73, 0x70, 0xea, 0xaa, 0xa3, 0x2f, 0x06, 0xe7, 0x7b, 0x0b, 0x36, 0x4b, 0x29, 0xfc, 0x9b, 0xdd,
	0x7c, 0x13, 0x5a, 0x19, 0xf2, 0x3c, 0x14, 0x3a, 0x8e, 0x7e, 0x11, 0x40, 0xab, 0x54, 0x9c, 0x4a,
	0xaf, 0xc8, 0x64, 0x6b, 0x8b, 0x5e, 0x71, 0xff, 0xb0, 0x60, 0x4b, 0x25, 0xd6, 0x9f, 0xa0, 0x3f,
	0x7d, 0xa6, 0x9a, 0xee, 0x75, 0xde, 0x76, 0xa0, 0x29, 0x32, 0x44, 0x56, 0xf4, 0xb7, 0x91, 0x24,
	0xde, 0x21, 0x9e, 0x61, 0x68, 0x6e, 0xd5, 0xc2, 0xc5, 0x4d, 0xae, 0xf9, 0x69, 0xac, 0x18, 0x93,
	0xe6, 0x62, 0x4c, 0x08, 0xd4, 0x27, 0x94, 0x4f, 0x54, 0xd3, 0xaf, 0x7b, 0xea, 0x2c, 0x79, 0x9f,
	0xe2, 0xcc, 0x4f, 0xf2, 0x58, 0xb4, 0x6d, 0x5d, 0x45, 0x21, 0x4b, 0x9b, 0x3f, 0x61, 0x61, 0x90,
	0x61, 0xac, 0xa6, 0xa1, 0xe1, 0xcd, 0x65, 0x99, 0x0d, 0xe3, 0x67, 0x34, 0x64, 0x81, 0x1a, 0x05,
	0xdb, 0x2b, 0x44, 0xf7, 0x3b, 0xfd, 0xca, 0x98, 0xda, 0x4b, 0x8d, 0xf1, 0x1f, 0x55, 0x7f, 0x03,
	0x9c, 0x88, 0xbe, 0xd4, 0xcc, 0x98, 0x67, 0x77, 0xa1, 0x70, 0x0f, 0xca, 0x44, 0xe8, 0x16, 0xe9,
	0x41, 0xc3, 0x97, 0x92, 0x99, 0xbf, 0x76, 0xb5, 0xc5, 0x16, 0x8c, 0x79, 0xda, 0xcd, 0x1d, 0x98,
	0x3e, 0xf7, 0x58, 0x7c, 0xda, 0x4f, 0xe2, 0xb1, 0x87, 0xcf, 0x57, 0x94, 0xb3, 0x07, 0x20, 0x7b,
	0xd2, 0xc7, 0x58, 0x60, 0x66, 0x7a, 0xaa, 0xa4, 0x71, 0x1f, 0x98, 0x39, 0x96, 0x51, 0x8e, 0x69,
	0x26, 0x16, 0xac, 0x59, 0x65, 0xd6, 0xd4, 0x58, 0x64, 0x67, 0x2a, 0x44, 0x4d, 0x8f, 0x85, 0x94,
	0xdc, 0x17, 0x40, 0x96, 0x92, 0x90, 0xa5, 0x94, 0x50, 0xb1, 0xaa, 0xa8, 0xec, 0x82, 0xc3, 0xf8,
	0x90, 0x0b, 0x3a, 0x0a, 0x75, 0x87, 0xdb, 0x9e, 0xcd, 0xf8, 0x89, 0x92, 0xe5, 0x8c, 0xa5, 0x34,
	0x13, 0xe6, 0xa1, 0x5e, 0x9a, 0xb1, 0x22, 0x41, 0x4f, 0xf9, 0xb8, 0x3f, 0x59, 0xe6, 0xe6, 0x13,
	0x95, 0x48, 0xc1, 0xe7, 0x0d, 0x70, 0x78, 0x3e, 0xe2, 0x33, 0x2e, 0x30, 0x32, 0x30, 0x2c, 0x14,
	0xa4, 0x0b, 0x2d, 0x8c, 0xcf, 0x58, 0x96, 0xc4, 0x11, 0xc6, 0xc2, 0xa0, 0x51, 0x56, 0xc9, 0xde,
	0x9a, 0x24, 0x5c, 0xc4, 0x34, 0x42, 0xf3, 0x00, 0xcc, 0xe5, 0x25, 0x28, 0xeb, 0xcb, 0x50, 0xca,
	0xda, 0x34, 0x2a, 0xf2, 0x5f, 0xdd, 0xd0, 0x1f, 0x6b, 0xc5, 0xe3, 0xc0, 0xfd, 0xba, 0x6e, 0x18,
	0xd7, 0xf9, 0x0e, 0xa8, 0xa0, 0xff, 0x6b, 0xb2, 0x04, 0xea, 0x19, 0xf5, 0xa7, 0x26, 0x4f, 0x75,
	0xae, 0x16, 0xd0, 0xac, 0x16, 0x40, 0x6e, 0x81, 0x1d, 0xa3, 0xd0, 0x9b, 0xcd, 0x9a, 0x22, 0x68,
	0xab, 0xd8, 0x6c, 0x3e, 0x45, 0xa1, 0x16, 0x9b, 0xb5, 0x58, 0x1f, 0xc8, 0x55, 0x68, 0x30, 0x3e,
	0xcc, 0x53, 0x35, 0xba, 0xb6, 0x57, 0x67, 0xfc, 0x69, 0x4a, 0xae, 0x83, 0xcd, 0xf8, 0x50, 0xfe,
	0x7c, 0x42, 0x35, 0xb6, 0x6a, 0x36, 0x9f, 0x48, 0x71, 0x79, 0x0f, 0x82, 0x55, 0x7b, 0x50, 0x69,
	0xd1, 0x69, 0xfd, 0x83, 0x45, 0x67, 0xfd, 0x6f, 0x17, 0x9d, 0xcd, 0x0b, 0x16, 0x9d, 0xad, 0xea,
	0xa2, 0x43, 0xba, 0xb0, 0x2e, 0x1f, 0xd4, 0x61, 0x48, 0xb9, 0x90, 0x75, 0x6d, 0xab, 0xae, 0x06,
	0xa9, 0x7b, 0x42, 0xb9, 0x78, 0x9a, 0x12, 0x17, 0x36, 0x94, 0x47, 0x9e, 0x0e, 0x39, 0x8b, 0x7d,
	0x6c, 0x5f, 0x51, 0x2e, 0x2d, 0xa9, 0x7c, 0x9a, 0x9e, 0x48, 0x95, 0xfb, 0xb1, 0x99, 0xd8, 0xa2,
	0x65, 0xe5, 0xa8, 0xbc, 0x57, 0xf9, 0xe9, 0x2e, 0x0d, 0xfd, 0xa2, 0x57, 0xcc, 0x9f, 0x65, 0x1d,
	0x40, 0x19, 0x3e, 0x89, 0x52, 0x31, 0xbb, 0xf7, 0x4d, 0x1d, 0x1a, 0x07, 0xfd, 0x2c, 0xf5, 0xc9,
	0x00, 0x9a, 0x27, 0x18, 0x07, 0x8f, 0x1e, 0x92, 0x1b, 0xab, 0xd7, 0x1b, 0x3d, 0x1e, 0x9d, 0xce,
	0x39, 0xd6, 0x34, 0x9c, 0xb9, 0x97, 0x48, 0x1f, 0x9c, 0x43, 0x14, 0x47, 0x98, 0x4d, 0x43, 0x24,
	0x9d, 0x15, 0xef, 0x4f, 0x11, 0xa6, 0xbd, 0xd2, 0xa6, 0x83, 0xdc, 0x87, 0xda, 0x21, 0x0a, 0x72,
	0xad, 0xea, 0xa2, 0x57, 0x8c, 0xce, 0x4a, 0xad, 0x7b, 0x89, 0x7c, 0x04, 0xb5, 0xe3, 0x5c, 0x90,
	0xeb, 0x55, 0x73, 0xe9, 0x0f, 0xde, 0x79, 0x73, 0x95, 0x49, 0xdf, 0xf8, 0x01, 0x34, 0xf4, 0x0a,
	0xb2, 0xf3, 0x5a, 0x74, 0xa5, 0x3f, 0xf7, 0xd6, 0x01, 0xd8, 0xc5, 0xbb, 0xb5, 0x7c, 0x75, 0xe9,
	0x51, 0xed, 0xec, 0x9e, 0x67, 0x2a, 0x50, 0x5b, 0xd3, 0x3c, 0x71, 0xb2, 0xbb, 0x8a, 0xbe, 0xa2,
	0x82, 0xeb, 0xab, 0x8d, 0x3a, 0xc8, 0x03, 0xb0, 0x4f, 0x26, 0xb9, 0x18, 0x24, 0x2f, 0x62, 0x72,
	0xb5, 0xea, 0xa8, 0xb8, 0xbe, 0x98, 0xb9, 0x87, 0xdb, 0x3f, 0xbf, 0xda, 0xb3, 0x7e, 0x79, 0xb5,
	0x67, 0xfd, 0xfa, 0x6a, 0xcf, 0xfa, 0xf1, 0xb7, 0xbd, 0x4b, 0xa3, 0xa6, 0x72, 0xbe, 0xff, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x34, 0x68, 0xe2, 0xdb, 0x0c, 0x00, 0x00,
}
