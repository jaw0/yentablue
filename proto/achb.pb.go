// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: achb.proto

package acproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import kibitz "github.com/jaw0/kibitz"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ACPHeartBeat struct {
	PeerInfo             *kibitz.PeerInfo `protobuf:"bytes,1,req,name=peer_info,json=peerInfo" json:"peer_info,omitempty"`
	SortMetric           *int32           `protobuf:"varint,2,opt,name=sort_metric,json=sortMetric" json:"sort_metric,omitempty"`
	ProcessId            *int32           `protobuf:"varint,3,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	CpuMetric            *int32           `protobuf:"varint,4,opt,name=cpu_metric,json=cpuMetric" json:"cpu_metric,omitempty"`
	CapacityMetric       *int32           `protobuf:"varint,5,opt,name=capacity_metric,json=capacityMetric" json:"capacity_metric,omitempty"`
	Database             []string         `protobuf:"bytes,6,rep,name=database" json:"database,omitempty"`
	Uptodate             *bool            `protobuf:"varint,7,opt,name=uptodate" json:"uptodate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ACPHeartBeat) Reset()         { *m = ACPHeartBeat{} }
func (m *ACPHeartBeat) String() string { return proto.CompactTextString(m) }
func (*ACPHeartBeat) ProtoMessage()    {}
func (*ACPHeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{0}
}
func (m *ACPHeartBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPHeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPHeartBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPHeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPHeartBeat.Merge(dst, src)
}
func (m *ACPHeartBeat) XXX_Size() int {
	return m.Size()
}
func (m *ACPHeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPHeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_ACPHeartBeat proto.InternalMessageInfo

func (m *ACPHeartBeat) GetPeerInfo() *kibitz.PeerInfo {
	if m != nil {
		return m.PeerInfo
	}
	return nil
}

func (m *ACPHeartBeat) GetSortMetric() int32 {
	if m != nil && m.SortMetric != nil {
		return *m.SortMetric
	}
	return 0
}

func (m *ACPHeartBeat) GetProcessId() int32 {
	if m != nil && m.ProcessId != nil {
		return *m.ProcessId
	}
	return 0
}

func (m *ACPHeartBeat) GetCpuMetric() int32 {
	if m != nil && m.CpuMetric != nil {
		return *m.CpuMetric
	}
	return 0
}

func (m *ACPHeartBeat) GetCapacityMetric() int32 {
	if m != nil && m.CapacityMetric != nil {
		return *m.CapacityMetric
	}
	return 0
}

func (m *ACPHeartBeat) GetDatabase() []string {
	if m != nil {
		return m.Database
	}
	return nil
}

func (m *ACPHeartBeat) GetUptodate() bool {
	if m != nil && m.Uptodate != nil {
		return *m.Uptodate
	}
	return false
}

type ACPHeartBeatRequest struct {
	Myself               *ACPHeartBeat `protobuf:"bytes,1,opt,name=myself" json:"myself,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ACPHeartBeatRequest) Reset()         { *m = ACPHeartBeatRequest{} }
func (m *ACPHeartBeatRequest) String() string { return proto.CompactTextString(m) }
func (*ACPHeartBeatRequest) ProtoMessage()    {}
func (*ACPHeartBeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{1}
}
func (m *ACPHeartBeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPHeartBeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPHeartBeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPHeartBeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPHeartBeatRequest.Merge(dst, src)
}
func (m *ACPHeartBeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *ACPHeartBeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPHeartBeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ACPHeartBeatRequest proto.InternalMessageInfo

func (m *ACPHeartBeatRequest) GetMyself() *ACPHeartBeat {
	if m != nil {
		return m.Myself
	}
	return nil
}

type ACPHeartBeatReply struct {
	StatusCode           *int32          `protobuf:"varint,1,req,name=status_code,json=statusCode" json:"status_code,omitempty"`
	StatusMessage        *string         `protobuf:"bytes,2,opt,name=status_message,json=statusMessage" json:"status_message,omitempty"`
	Hbinfo               []*ACPHeartBeat `protobuf:"bytes,3,rep,name=hbinfo" json:"hbinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ACPHeartBeatReply) Reset()         { *m = ACPHeartBeatReply{} }
func (m *ACPHeartBeatReply) String() string { return proto.CompactTextString(m) }
func (*ACPHeartBeatReply) ProtoMessage()    {}
func (*ACPHeartBeatReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{2}
}
func (m *ACPHeartBeatReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPHeartBeatReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPHeartBeatReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPHeartBeatReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPHeartBeatReply.Merge(dst, src)
}
func (m *ACPHeartBeatReply) XXX_Size() int {
	return m.Size()
}
func (m *ACPHeartBeatReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPHeartBeatReply.DiscardUnknown(m)
}

var xxx_messageInfo_ACPHeartBeatReply proto.InternalMessageInfo

func (m *ACPHeartBeatReply) GetStatusCode() int32 {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return 0
}

func (m *ACPHeartBeatReply) GetStatusMessage() string {
	if m != nil && m.StatusMessage != nil {
		return *m.StatusMessage
	}
	return ""
}

func (m *ACPHeartBeatReply) GetHbinfo() []*ACPHeartBeat {
	if m != nil {
		return m.Hbinfo
	}
	return nil
}

type ACPY2MapDatum struct {
	Map                  *string  `protobuf:"bytes,1,req,name=map" json:"map,omitempty"`
	Shard                *uint32  `protobuf:"varint,2,opt,name=shard" json:"shard,omitempty"`
	Key                  *string  `protobuf:"bytes,3,req,name=key" json:"key,omitempty"`
	Version              *uint64  `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	Value                []byte   `protobuf:"bytes,5,opt,name=value" json:"value,omitempty"`
	Expire               *uint64  `protobuf:"varint,7,opt,name=expire" json:"expire,omitempty"`
	ConfTime             *uint64  `protobuf:"varint,9,opt,name=conf_time,json=confTime" json:"conf_time,omitempty"`
	IfVersion            *uint64  `protobuf:"varint,10,opt,name=if_version,json=ifVersion" json:"if_version,omitempty"`
	Location             []string `protobuf:"bytes,11,rep,name=location" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2MapDatum) Reset()         { *m = ACPY2MapDatum{} }
func (m *ACPY2MapDatum) String() string { return proto.CompactTextString(m) }
func (*ACPY2MapDatum) ProtoMessage()    {}
func (*ACPY2MapDatum) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{3}
}
func (m *ACPY2MapDatum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2MapDatum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2MapDatum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2MapDatum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2MapDatum.Merge(dst, src)
}
func (m *ACPY2MapDatum) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2MapDatum) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2MapDatum.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2MapDatum proto.InternalMessageInfo

func (m *ACPY2MapDatum) GetMap() string {
	if m != nil && m.Map != nil {
		return *m.Map
	}
	return ""
}

func (m *ACPY2MapDatum) GetShard() uint32 {
	if m != nil && m.Shard != nil {
		return *m.Shard
	}
	return 0
}

func (m *ACPY2MapDatum) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *ACPY2MapDatum) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *ACPY2MapDatum) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ACPY2MapDatum) GetExpire() uint64 {
	if m != nil && m.Expire != nil {
		return *m.Expire
	}
	return 0
}

func (m *ACPY2MapDatum) GetConfTime() uint64 {
	if m != nil && m.ConfTime != nil {
		return *m.ConfTime
	}
	return 0
}

func (m *ACPY2MapDatum) GetIfVersion() uint64 {
	if m != nil && m.IfVersion != nil {
		return *m.IfVersion
	}
	return 0
}

func (m *ACPY2MapDatum) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

type ACPY2GetSet struct {
	Data                 []*ACPY2MapDatum `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ACPY2GetSet) Reset()         { *m = ACPY2GetSet{} }
func (m *ACPY2GetSet) String() string { return proto.CompactTextString(m) }
func (*ACPY2GetSet) ProtoMessage()    {}
func (*ACPY2GetSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{4}
}
func (m *ACPY2GetSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2GetSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2GetSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2GetSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2GetSet.Merge(dst, src)
}
func (m *ACPY2GetSet) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2GetSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2GetSet.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2GetSet proto.InternalMessageInfo

func (m *ACPY2GetSet) GetData() []*ACPY2MapDatum {
	if m != nil {
		return m.Data
	}
	return nil
}

type ACPY2GetRange struct {
	Map                  *string  `protobuf:"bytes,1,req,name=map" json:"map,omitempty"`
	Key0                 *string  `protobuf:"bytes,2,opt,name=key0" json:"key0,omitempty"`
	Key1                 *string  `protobuf:"bytes,3,opt,name=key1" json:"key1,omitempty"`
	Version0             *uint64  `protobuf:"varint,4,opt,name=version0" json:"version0,omitempty"`
	Version1             *uint64  `protobuf:"varint,5,opt,name=version1" json:"version1,omitempty"`
	Shard                *uint32  `protobuf:"varint,6,opt,name=shard" json:"shard,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2GetRange) Reset()         { *m = ACPY2GetRange{} }
func (m *ACPY2GetRange) String() string { return proto.CompactTextString(m) }
func (*ACPY2GetRange) ProtoMessage()    {}
func (*ACPY2GetRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{5}
}
func (m *ACPY2GetRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2GetRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2GetRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2GetRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2GetRange.Merge(dst, src)
}
func (m *ACPY2GetRange) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2GetRange) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2GetRange.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2GetRange proto.InternalMessageInfo

func (m *ACPY2GetRange) GetMap() string {
	if m != nil && m.Map != nil {
		return *m.Map
	}
	return ""
}

func (m *ACPY2GetRange) GetKey0() string {
	if m != nil && m.Key0 != nil {
		return *m.Key0
	}
	return ""
}

func (m *ACPY2GetRange) GetKey1() string {
	if m != nil && m.Key1 != nil {
		return *m.Key1
	}
	return ""
}

func (m *ACPY2GetRange) GetVersion0() uint64 {
	if m != nil && m.Version0 != nil {
		return *m.Version0
	}
	return 0
}

func (m *ACPY2GetRange) GetVersion1() uint64 {
	if m != nil && m.Version1 != nil {
		return *m.Version1
	}
	return 0
}

func (m *ACPY2GetRange) GetShard() uint32 {
	if m != nil && m.Shard != nil {
		return *m.Shard
	}
	return 0
}

type ACPY2DistRequest struct {
	Hop                  *int32         `protobuf:"varint,1,req,name=hop" json:"hop,omitempty"`
	Expire               *uint64        `protobuf:"varint,2,req,name=expire" json:"expire,omitempty"`
	Sender               *string        `protobuf:"bytes,3,opt,name=sender" json:"sender,omitempty"`
	Data                 *ACPY2MapDatum `protobuf:"bytes,4,req,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ACPY2DistRequest) Reset()         { *m = ACPY2DistRequest{} }
func (m *ACPY2DistRequest) String() string { return proto.CompactTextString(m) }
func (*ACPY2DistRequest) ProtoMessage()    {}
func (*ACPY2DistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{6}
}
func (m *ACPY2DistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2DistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2DistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2DistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2DistRequest.Merge(dst, src)
}
func (m *ACPY2DistRequest) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2DistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2DistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2DistRequest proto.InternalMessageInfo

func (m *ACPY2DistRequest) GetHop() int32 {
	if m != nil && m.Hop != nil {
		return *m.Hop
	}
	return 0
}

func (m *ACPY2DistRequest) GetExpire() uint64 {
	if m != nil && m.Expire != nil {
		return *m.Expire
	}
	return 0
}

func (m *ACPY2DistRequest) GetSender() string {
	if m != nil && m.Sender != nil {
		return *m.Sender
	}
	return ""
}

func (m *ACPY2DistRequest) GetData() *ACPY2MapDatum {
	if m != nil {
		return m.Data
	}
	return nil
}

type ACPY2DistReply struct {
	StatusCode           *int32   `protobuf:"varint,1,req,name=status_code,json=statusCode" json:"status_code,omitempty"`
	StatusMessage        *string  `protobuf:"bytes,2,req,name=status_message,json=statusMessage" json:"status_message,omitempty"`
	ResultCode           *int32   `protobuf:"varint,3,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	ConfTime             *int64   `protobuf:"varint,4,opt,name=conf_time,json=confTime" json:"conf_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2DistReply) Reset()         { *m = ACPY2DistReply{} }
func (m *ACPY2DistReply) String() string { return proto.CompactTextString(m) }
func (*ACPY2DistReply) ProtoMessage()    {}
func (*ACPY2DistReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{7}
}
func (m *ACPY2DistReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2DistReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2DistReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2DistReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2DistReply.Merge(dst, src)
}
func (m *ACPY2DistReply) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2DistReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2DistReply.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2DistReply proto.InternalMessageInfo

func (m *ACPY2DistReply) GetStatusCode() int32 {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return 0
}

func (m *ACPY2DistReply) GetStatusMessage() string {
	if m != nil && m.StatusMessage != nil {
		return *m.StatusMessage
	}
	return ""
}

func (m *ACPY2DistReply) GetResultCode() int32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

func (m *ACPY2DistReply) GetConfTime() int64 {
	if m != nil && m.ConfTime != nil {
		return *m.ConfTime
	}
	return 0
}

type ACPY2CheckValue struct {
	Map                  *string  `protobuf:"bytes,1,req,name=map" json:"map,omitempty"`
	Treeid               *uint32  `protobuf:"varint,2,opt,name=treeid" json:"treeid,omitempty"`
	Level                *int32   `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Version              *uint64  `protobuf:"varint,4,req,name=version" json:"version,omitempty"`
	Shard                *uint32  `protobuf:"varint,5,opt,name=shard" json:"shard,omitempty"`
	Key                  *string  `protobuf:"bytes,6,opt,name=key" json:"key,omitempty"`
	Hash                 []byte   `protobuf:"bytes,7,opt,name=hash" json:"hash,omitempty"`
	Keycount             *int64   `protobuf:"varint,8,opt,name=keycount" json:"keycount,omitempty"`
	Children             *int32   `protobuf:"varint,9,opt,name=children" json:"children,omitempty"`
	Isvalid              *bool    `protobuf:"varint,10,opt,name=isvalid" json:"isvalid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2CheckValue) Reset()         { *m = ACPY2CheckValue{} }
func (m *ACPY2CheckValue) String() string { return proto.CompactTextString(m) }
func (*ACPY2CheckValue) ProtoMessage()    {}
func (*ACPY2CheckValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{8}
}
func (m *ACPY2CheckValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2CheckValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2CheckValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2CheckValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2CheckValue.Merge(dst, src)
}
func (m *ACPY2CheckValue) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2CheckValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2CheckValue.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2CheckValue proto.InternalMessageInfo

func (m *ACPY2CheckValue) GetMap() string {
	if m != nil && m.Map != nil {
		return *m.Map
	}
	return ""
}

func (m *ACPY2CheckValue) GetTreeid() uint32 {
	if m != nil && m.Treeid != nil {
		return *m.Treeid
	}
	return 0
}

func (m *ACPY2CheckValue) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *ACPY2CheckValue) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *ACPY2CheckValue) GetShard() uint32 {
	if m != nil && m.Shard != nil {
		return *m.Shard
	}
	return 0
}

func (m *ACPY2CheckValue) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *ACPY2CheckValue) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ACPY2CheckValue) GetKeycount() int64 {
	if m != nil && m.Keycount != nil {
		return *m.Keycount
	}
	return 0
}

func (m *ACPY2CheckValue) GetChildren() int32 {
	if m != nil && m.Children != nil {
		return *m.Children
	}
	return 0
}

func (m *ACPY2CheckValue) GetIsvalid() bool {
	if m != nil && m.Isvalid != nil {
		return *m.Isvalid
	}
	return false
}

type ACPY2CheckRequest struct {
	Map                  *string  `protobuf:"bytes,1,req,name=map" json:"map,omitempty"`
	Treeid               *uint32  `protobuf:"varint,2,opt,name=treeid" json:"treeid,omitempty"`
	Level                *int32   `protobuf:"varint,3,req,name=level" json:"level,omitempty"`
	Version              *uint64  `protobuf:"varint,4,req,name=version" json:"version,omitempty"`
	Maxresult            *int32   `protobuf:"varint,5,opt,name=maxresult" json:"maxresult,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2CheckRequest) Reset()         { *m = ACPY2CheckRequest{} }
func (m *ACPY2CheckRequest) String() string { return proto.CompactTextString(m) }
func (*ACPY2CheckRequest) ProtoMessage()    {}
func (*ACPY2CheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{9}
}
func (m *ACPY2CheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2CheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2CheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2CheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2CheckRequest.Merge(dst, src)
}
func (m *ACPY2CheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2CheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2CheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2CheckRequest proto.InternalMessageInfo

func (m *ACPY2CheckRequest) GetMap() string {
	if m != nil && m.Map != nil {
		return *m.Map
	}
	return ""
}

func (m *ACPY2CheckRequest) GetTreeid() uint32 {
	if m != nil && m.Treeid != nil {
		return *m.Treeid
	}
	return 0
}

func (m *ACPY2CheckRequest) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *ACPY2CheckRequest) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *ACPY2CheckRequest) GetMaxresult() int32 {
	if m != nil && m.Maxresult != nil {
		return *m.Maxresult
	}
	return 0
}

type ACPY2CheckReply struct {
	Check                []*ACPY2CheckValue `protobuf:"bytes,1,rep,name=check" json:"check,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ACPY2CheckReply) Reset()         { *m = ACPY2CheckReply{} }
func (m *ACPY2CheckReply) String() string { return proto.CompactTextString(m) }
func (*ACPY2CheckReply) ProtoMessage()    {}
func (*ACPY2CheckReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{10}
}
func (m *ACPY2CheckReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2CheckReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2CheckReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2CheckReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2CheckReply.Merge(dst, src)
}
func (m *ACPY2CheckReply) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2CheckReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2CheckReply.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2CheckReply proto.InternalMessageInfo

func (m *ACPY2CheckReply) GetCheck() []*ACPY2CheckValue {
	if m != nil {
		return m.Check
	}
	return nil
}

type ACPY2RingConfReq struct {
	Map                  *string  `protobuf:"bytes,1,req,name=map" json:"map,omitempty"`
	Datacenter           *string  `protobuf:"bytes,2,opt,name=datacenter" json:"datacenter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2RingConfReq) Reset()         { *m = ACPY2RingConfReq{} }
func (m *ACPY2RingConfReq) String() string { return proto.CompactTextString(m) }
func (*ACPY2RingConfReq) ProtoMessage()    {}
func (*ACPY2RingConfReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{11}
}
func (m *ACPY2RingConfReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2RingConfReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2RingConfReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2RingConfReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2RingConfReq.Merge(dst, src)
}
func (m *ACPY2RingConfReq) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2RingConfReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2RingConfReq.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2RingConfReq proto.InternalMessageInfo

func (m *ACPY2RingConfReq) GetMap() string {
	if m != nil && m.Map != nil {
		return *m.Map
	}
	return ""
}

func (m *ACPY2RingConfReq) GetDatacenter() string {
	if m != nil && m.Datacenter != nil {
		return *m.Datacenter
	}
	return ""
}

type ACPY2RingPart struct {
	Shard                *uint32  `protobuf:"varint,1,req,name=shard" json:"shard,omitempty"`
	Server               []string `protobuf:"bytes,2,rep,name=server" json:"server,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2RingPart) Reset()         { *m = ACPY2RingPart{} }
func (m *ACPY2RingPart) String() string { return proto.CompactTextString(m) }
func (*ACPY2RingPart) ProtoMessage()    {}
func (*ACPY2RingPart) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{12}
}
func (m *ACPY2RingPart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2RingPart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2RingPart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2RingPart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2RingPart.Merge(dst, src)
}
func (m *ACPY2RingPart) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2RingPart) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2RingPart.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2RingPart proto.InternalMessageInfo

func (m *ACPY2RingPart) GetShard() uint32 {
	if m != nil && m.Shard != nil {
		return *m.Shard
	}
	return 0
}

func (m *ACPY2RingPart) GetServer() []string {
	if m != nil {
		return m.Server
	}
	return nil
}

type ACPY2RingConfReply struct {
	Version              *uint64          `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	IsStable             *bool            `protobuf:"varint,2,req,name=is_stable,json=isStable" json:"is_stable,omitempty"`
	Part                 []*ACPY2RingPart `protobuf:"bytes,3,rep,name=part" json:"part,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ACPY2RingConfReply) Reset()         { *m = ACPY2RingConfReply{} }
func (m *ACPY2RingConfReply) String() string { return proto.CompactTextString(m) }
func (*ACPY2RingConfReply) ProtoMessage()    {}
func (*ACPY2RingConfReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{13}
}
func (m *ACPY2RingConfReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2RingConfReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2RingConfReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2RingConfReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2RingConfReply.Merge(dst, src)
}
func (m *ACPY2RingConfReply) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2RingConfReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2RingConfReply.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2RingConfReply proto.InternalMessageInfo

func (m *ACPY2RingConfReply) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *ACPY2RingConfReply) GetIsStable() bool {
	if m != nil && m.IsStable != nil {
		return *m.IsStable
	}
	return false
}

func (m *ACPY2RingConfReply) GetPart() []*ACPY2RingPart {
	if m != nil {
		return m.Part
	}
	return nil
}

type ACPY2ServerRequest struct {
	Subsystem            *string  `protobuf:"bytes,1,opt,name=subsystem" json:"subsystem,omitempty"`
	Environment          *string  `protobuf:"bytes,2,opt,name=environment" json:"environment,omitempty"`
	Hostname             *string  `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	Datacenter           *string  `protobuf:"bytes,4,opt,name=datacenter" json:"datacenter,omitempty"`
	ServerId             *string  `protobuf:"bytes,5,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2ServerRequest) Reset()         { *m = ACPY2ServerRequest{} }
func (m *ACPY2ServerRequest) String() string { return proto.CompactTextString(m) }
func (*ACPY2ServerRequest) ProtoMessage()    {}
func (*ACPY2ServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{14}
}
func (m *ACPY2ServerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2ServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2ServerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2ServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2ServerRequest.Merge(dst, src)
}
func (m *ACPY2ServerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2ServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2ServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2ServerRequest proto.InternalMessageInfo

func (m *ACPY2ServerRequest) GetSubsystem() string {
	if m != nil && m.Subsystem != nil {
		return *m.Subsystem
	}
	return ""
}

func (m *ACPY2ServerRequest) GetEnvironment() string {
	if m != nil && m.Environment != nil {
		return *m.Environment
	}
	return ""
}

func (m *ACPY2ServerRequest) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *ACPY2ServerRequest) GetDatacenter() string {
	if m != nil && m.Datacenter != nil {
		return *m.Datacenter
	}
	return ""
}

func (m *ACPY2ServerRequest) GetServerId() string {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return ""
}

type ACPY2ServerData struct {
	Subsystem            *string           `protobuf:"bytes,1,req,name=subsystem" json:"subsystem,omitempty"`
	Environment          *string           `protobuf:"bytes,2,req,name=environment" json:"environment,omitempty"`
	Hostname             *string           `protobuf:"bytes,3,req,name=hostname" json:"hostname,omitempty"`
	Datacenter           *string           `protobuf:"bytes,4,opt,name=datacenter" json:"datacenter,omitempty"`
	Rack                 *string           `protobuf:"bytes,5,opt,name=rack" json:"rack,omitempty"`
	ServerId             *string           `protobuf:"bytes,6,req,name=server_id,json=serverId" json:"server_id,omitempty"`
	NetInfo              []*kibitz.NetInfo `protobuf:"bytes,7,rep,name=net_info,json=netInfo" json:"net_info,omitempty"`
	IsUp                 *bool             `protobuf:"varint,8,req,name=is_up,json=isUp" json:"is_up,omitempty"`
	IsLocal              *bool             `protobuf:"varint,9,opt,name=is_local,json=isLocal" json:"is_local,omitempty"`
	SortMetric           *int32            `protobuf:"varint,10,opt,name=sort_metric,json=sortMetric" json:"sort_metric,omitempty"`
	CpuMetric            *int32            `protobuf:"varint,11,opt,name=cpu_metric,json=cpuMetric" json:"cpu_metric,omitempty"`
	CapacityMetric       *int32            `protobuf:"varint,12,opt,name=capacity_metric,json=capacityMetric" json:"capacity_metric,omitempty"`
	Database             []string          `protobuf:"bytes,14,rep,name=database" json:"database,omitempty"`
	Uptodate             *bool             `protobuf:"varint,15,opt,name=uptodate" json:"uptodate,omitempty"`
	TimeUp               *uint64           `protobuf:"varint,16,req,name=time_up,json=timeUp" json:"time_up,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ACPY2ServerData) Reset()         { *m = ACPY2ServerData{} }
func (m *ACPY2ServerData) String() string { return proto.CompactTextString(m) }
func (*ACPY2ServerData) ProtoMessage()    {}
func (*ACPY2ServerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{15}
}
func (m *ACPY2ServerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2ServerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2ServerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2ServerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2ServerData.Merge(dst, src)
}
func (m *ACPY2ServerData) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2ServerData) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2ServerData.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2ServerData proto.InternalMessageInfo

func (m *ACPY2ServerData) GetSubsystem() string {
	if m != nil && m.Subsystem != nil {
		return *m.Subsystem
	}
	return ""
}

func (m *ACPY2ServerData) GetEnvironment() string {
	if m != nil && m.Environment != nil {
		return *m.Environment
	}
	return ""
}

func (m *ACPY2ServerData) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *ACPY2ServerData) GetDatacenter() string {
	if m != nil && m.Datacenter != nil {
		return *m.Datacenter
	}
	return ""
}

func (m *ACPY2ServerData) GetRack() string {
	if m != nil && m.Rack != nil {
		return *m.Rack
	}
	return ""
}

func (m *ACPY2ServerData) GetServerId() string {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return ""
}

func (m *ACPY2ServerData) GetNetInfo() []*kibitz.NetInfo {
	if m != nil {
		return m.NetInfo
	}
	return nil
}

func (m *ACPY2ServerData) GetIsUp() bool {
	if m != nil && m.IsUp != nil {
		return *m.IsUp
	}
	return false
}

func (m *ACPY2ServerData) GetIsLocal() bool {
	if m != nil && m.IsLocal != nil {
		return *m.IsLocal
	}
	return false
}

func (m *ACPY2ServerData) GetSortMetric() int32 {
	if m != nil && m.SortMetric != nil {
		return *m.SortMetric
	}
	return 0
}

func (m *ACPY2ServerData) GetCpuMetric() int32 {
	if m != nil && m.CpuMetric != nil {
		return *m.CpuMetric
	}
	return 0
}

func (m *ACPY2ServerData) GetCapacityMetric() int32 {
	if m != nil && m.CapacityMetric != nil {
		return *m.CapacityMetric
	}
	return 0
}

func (m *ACPY2ServerData) GetDatabase() []string {
	if m != nil {
		return m.Database
	}
	return nil
}

func (m *ACPY2ServerData) GetUptodate() bool {
	if m != nil && m.Uptodate != nil {
		return *m.Uptodate
	}
	return false
}

func (m *ACPY2ServerData) GetTimeUp() uint64 {
	if m != nil && m.TimeUp != nil {
		return *m.TimeUp
	}
	return 0
}

type ACPY2ServerReply struct {
	Data                 []*ACPY2ServerData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ACPY2ServerReply) Reset()         { *m = ACPY2ServerReply{} }
func (m *ACPY2ServerReply) String() string { return proto.CompactTextString(m) }
func (*ACPY2ServerReply) ProtoMessage()    {}
func (*ACPY2ServerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{16}
}
func (m *ACPY2ServerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2ServerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2ServerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2ServerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2ServerReply.Merge(dst, src)
}
func (m *ACPY2ServerReply) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2ServerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2ServerReply.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2ServerReply proto.InternalMessageInfo

func (m *ACPY2ServerReply) GetData() []*ACPY2ServerData {
	if m != nil {
		return m.Data
	}
	return nil
}

type ACPY2Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACPY2Empty) Reset()         { *m = ACPY2Empty{} }
func (m *ACPY2Empty) String() string { return proto.CompactTextString(m) }
func (*ACPY2Empty) ProtoMessage()    {}
func (*ACPY2Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_achb_a37b42bc256bb4fa, []int{17}
}
func (m *ACPY2Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACPY2Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACPY2Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACPY2Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACPY2Empty.Merge(dst, src)
}
func (m *ACPY2Empty) XXX_Size() int {
	return m.Size()
}
func (m *ACPY2Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_ACPY2Empty.DiscardUnknown(m)
}

var xxx_messageInfo_ACPY2Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ACPHeartBeat)(nil), "acproto.ACPHeartBeat")
	proto.RegisterType((*ACPHeartBeatRequest)(nil), "acproto.ACPHeartBeatRequest")
	proto.RegisterType((*ACPHeartBeatReply)(nil), "acproto.ACPHeartBeatReply")
	proto.RegisterType((*ACPY2MapDatum)(nil), "acproto.ACPY2MapDatum")
	proto.RegisterType((*ACPY2GetSet)(nil), "acproto.ACPY2GetSet")
	proto.RegisterType((*ACPY2GetRange)(nil), "acproto.ACPY2GetRange")
	proto.RegisterType((*ACPY2DistRequest)(nil), "acproto.ACPY2DistRequest")
	proto.RegisterType((*ACPY2DistReply)(nil), "acproto.ACPY2DistReply")
	proto.RegisterType((*ACPY2CheckValue)(nil), "acproto.ACPY2CheckValue")
	proto.RegisterType((*ACPY2CheckRequest)(nil), "acproto.ACPY2CheckRequest")
	proto.RegisterType((*ACPY2CheckReply)(nil), "acproto.ACPY2CheckReply")
	proto.RegisterType((*ACPY2RingConfReq)(nil), "acproto.ACPY2RingConfReq")
	proto.RegisterType((*ACPY2RingPart)(nil), "acproto.ACPY2RingPart")
	proto.RegisterType((*ACPY2RingConfReply)(nil), "acproto.ACPY2RingConfReply")
	proto.RegisterType((*ACPY2ServerRequest)(nil), "acproto.ACPY2ServerRequest")
	proto.RegisterType((*ACPY2ServerData)(nil), "acproto.ACPY2ServerData")
	proto.RegisterType((*ACPY2ServerReply)(nil), "acproto.ACPY2ServerReply")
	proto.RegisterType((*ACPY2Empty)(nil), "acproto.ACPY2Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ACrpcClient is the client API for ACrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ACrpcClient interface {
	SendHB(ctx context.Context, in *ACPHeartBeatRequest, opts ...grpc.CallOption) (*ACPHeartBeatReply, error)
	GetMerkle(ctx context.Context, in *ACPY2CheckRequest, opts ...grpc.CallOption) (*ACPY2CheckReply, error)
	Get(ctx context.Context, in *ACPY2GetSet, opts ...grpc.CallOption) (*ACPY2GetSet, error)
	Put(ctx context.Context, in *ACPY2DistRequest, opts ...grpc.CallOption) (*ACPY2DistReply, error)
	Range(ctx context.Context, in *ACPY2GetRange, opts ...grpc.CallOption) (*ACPY2GetSet, error)
	RingConf(ctx context.Context, in *ACPY2RingConfReq, opts ...grpc.CallOption) (*ACPY2RingConfReply, error)
	Servers(ctx context.Context, in *ACPY2ServerRequest, opts ...grpc.CallOption) (*ACPY2ServerReply, error)
	ShutDown(ctx context.Context, in *ACPY2Empty, opts ...grpc.CallOption) (*ACPHeartBeatReply, error)
}

type aCrpcClient struct {
	cc *grpc.ClientConn
}

func NewACrpcClient(cc *grpc.ClientConn) ACrpcClient {
	return &aCrpcClient{cc}
}

func (c *aCrpcClient) SendHB(ctx context.Context, in *ACPHeartBeatRequest, opts ...grpc.CallOption) (*ACPHeartBeatReply, error) {
	out := new(ACPHeartBeatReply)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/SendHB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) GetMerkle(ctx context.Context, in *ACPY2CheckRequest, opts ...grpc.CallOption) (*ACPY2CheckReply, error) {
	out := new(ACPY2CheckReply)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/GetMerkle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) Get(ctx context.Context, in *ACPY2GetSet, opts ...grpc.CallOption) (*ACPY2GetSet, error) {
	out := new(ACPY2GetSet)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) Put(ctx context.Context, in *ACPY2DistRequest, opts ...grpc.CallOption) (*ACPY2DistReply, error) {
	out := new(ACPY2DistReply)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) Range(ctx context.Context, in *ACPY2GetRange, opts ...grpc.CallOption) (*ACPY2GetSet, error) {
	out := new(ACPY2GetSet)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/Range", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) RingConf(ctx context.Context, in *ACPY2RingConfReq, opts ...grpc.CallOption) (*ACPY2RingConfReply, error) {
	out := new(ACPY2RingConfReply)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/RingConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) Servers(ctx context.Context, in *ACPY2ServerRequest, opts ...grpc.CallOption) (*ACPY2ServerReply, error) {
	out := new(ACPY2ServerReply)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/Servers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCrpcClient) ShutDown(ctx context.Context, in *ACPY2Empty, opts ...grpc.CallOption) (*ACPHeartBeatReply, error) {
	out := new(ACPHeartBeatReply)
	err := c.cc.Invoke(ctx, "/acproto.ACrpc/ShutDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACrpcServer is the server API for ACrpc service.
type ACrpcServer interface {
	SendHB(context.Context, *ACPHeartBeatRequest) (*ACPHeartBeatReply, error)
	GetMerkle(context.Context, *ACPY2CheckRequest) (*ACPY2CheckReply, error)
	Get(context.Context, *ACPY2GetSet) (*ACPY2GetSet, error)
	Put(context.Context, *ACPY2DistRequest) (*ACPY2DistReply, error)
	Range(context.Context, *ACPY2GetRange) (*ACPY2GetSet, error)
	RingConf(context.Context, *ACPY2RingConfReq) (*ACPY2RingConfReply, error)
	Servers(context.Context, *ACPY2ServerRequest) (*ACPY2ServerReply, error)
	ShutDown(context.Context, *ACPY2Empty) (*ACPHeartBeatReply, error)
}

func RegisterACrpcServer(s *grpc.Server, srv ACrpcServer) {
	s.RegisterService(&_ACrpc_serviceDesc, srv)
}

func _ACrpc_SendHB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPHeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).SendHB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/SendHB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).SendHB(ctx, req.(*ACPHeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_GetMerkle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).GetMerkle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/GetMerkle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).GetMerkle(ctx, req.(*ACPY2CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2GetSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).Get(ctx, req.(*ACPY2GetSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2DistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).Put(ctx, req.(*ACPY2DistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_Range_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2GetRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).Range(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/Range",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).Range(ctx, req.(*ACPY2GetRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_RingConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2RingConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).RingConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/RingConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).RingConf(ctx, req.(*ACPY2RingConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_Servers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).Servers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/Servers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).Servers(ctx, req.(*ACPY2ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACrpc_ShutDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACPY2Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACrpcServer).ShutDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acproto.ACrpc/ShutDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACrpcServer).ShutDown(ctx, req.(*ACPY2Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ACrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "acproto.ACrpc",
	HandlerType: (*ACrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendHB",
			Handler:    _ACrpc_SendHB_Handler,
		},
		{
			MethodName: "GetMerkle",
			Handler:    _ACrpc_GetMerkle_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ACrpc_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _ACrpc_Put_Handler,
		},
		{
			MethodName: "Range",
			Handler:    _ACrpc_Range_Handler,
		},
		{
			MethodName: "RingConf",
			Handler:    _ACrpc_RingConf_Handler,
		},
		{
			MethodName: "Servers",
			Handler:    _ACrpc_Servers_Handler,
		},
		{
			MethodName: "ShutDown",
			Handler:    _ACrpc_ShutDown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "achb.proto",
}

func (m *ACPHeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPHeartBeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PeerInfo == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.PeerInfo.Size()))
		n1, err := m.PeerInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.SortMetric != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.SortMetric))
	}
	if m.ProcessId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.ProcessId))
	}
	if m.CpuMetric != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.CpuMetric))
	}
	if m.CapacityMetric != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.CapacityMetric))
	}
	if len(m.Database) > 0 {
		for _, s := range m.Database {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Uptodate != nil {
		dAtA[i] = 0x38
		i++
		if *m.Uptodate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPHeartBeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPHeartBeatRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Myself != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Myself.Size()))
		n2, err := m.Myself.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPHeartBeatReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPHeartBeatReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusCode == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.StatusCode))
	}
	if m.StatusMessage != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.StatusMessage)))
		i += copy(dAtA[i:], *m.StatusMessage)
	}
	if len(m.Hbinfo) > 0 {
		for _, msg := range m.Hbinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAchb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2MapDatum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2MapDatum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Map == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Map)))
		i += copy(dAtA[i:], *m.Map)
	}
	if m.Shard != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Shard))
	}
	if m.Key == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Key)))
		i += copy(dAtA[i:], *m.Key)
	}
	if m.Version != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Version))
	}
	if m.Value != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Expire != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Expire))
	}
	if m.ConfTime != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.ConfTime))
	}
	if m.IfVersion != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.IfVersion))
	}
	if len(m.Location) > 0 {
		for _, s := range m.Location {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2GetSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2GetSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAchb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2GetRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2GetRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Map == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Map)))
		i += copy(dAtA[i:], *m.Map)
	}
	if m.Key0 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Key0)))
		i += copy(dAtA[i:], *m.Key0)
	}
	if m.Key1 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Key1)))
		i += copy(dAtA[i:], *m.Key1)
	}
	if m.Version0 != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Version0))
	}
	if m.Version1 != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Version1))
	}
	if m.Shard != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Shard))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2DistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2DistRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hop == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Hop))
	}
	if m.Expire == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Expire))
	}
	if m.Sender != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Sender)))
		i += copy(dAtA[i:], *m.Sender)
	}
	if m.Data == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAchb(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2DistReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2DistReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusCode == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.StatusCode))
	}
	if m.StatusMessage == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.StatusMessage)))
		i += copy(dAtA[i:], *m.StatusMessage)
	}
	if m.ResultCode == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.ResultCode))
	}
	if m.ConfTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.ConfTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2CheckValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2CheckValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Map == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Map)))
		i += copy(dAtA[i:], *m.Map)
	}
	if m.Treeid != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Treeid))
	}
	if m.Level != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Level))
	}
	if m.Version == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Version))
	}
	if m.Shard != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Shard))
	}
	if m.Key != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Key)))
		i += copy(dAtA[i:], *m.Key)
	}
	if m.Hash != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Keycount != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Keycount))
	}
	if m.Children != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Children))
	}
	if m.Isvalid != nil {
		dAtA[i] = 0x50
		i++
		if *m.Isvalid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2CheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2CheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Map == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Map)))
		i += copy(dAtA[i:], *m.Map)
	}
	if m.Treeid != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Treeid))
	}
	if m.Level == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Level))
	}
	if m.Version == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Version))
	}
	if m.Maxresult != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Maxresult))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2CheckReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2CheckReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Check) > 0 {
		for _, msg := range m.Check {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAchb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2RingConfReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2RingConfReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Map == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Map)))
		i += copy(dAtA[i:], *m.Map)
	}
	if m.Datacenter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Datacenter)))
		i += copy(dAtA[i:], *m.Datacenter)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2RingPart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2RingPart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Shard == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Shard))
	}
	if len(m.Server) > 0 {
		for _, s := range m.Server {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2RingConfReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2RingConfReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.Version))
	}
	if m.IsStable == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		if *m.IsStable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Part) > 0 {
		for _, msg := range m.Part {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAchb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2ServerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2ServerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Subsystem != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Subsystem)))
		i += copy(dAtA[i:], *m.Subsystem)
	}
	if m.Environment != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Environment)))
		i += copy(dAtA[i:], *m.Environment)
	}
	if m.Hostname != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Hostname)))
		i += copy(dAtA[i:], *m.Hostname)
	}
	if m.Datacenter != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Datacenter)))
		i += copy(dAtA[i:], *m.Datacenter)
	}
	if m.ServerId != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.ServerId)))
		i += copy(dAtA[i:], *m.ServerId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2ServerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2ServerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Subsystem == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Subsystem)))
		i += copy(dAtA[i:], *m.Subsystem)
	}
	if m.Environment == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Environment)))
		i += copy(dAtA[i:], *m.Environment)
	}
	if m.Hostname == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Hostname)))
		i += copy(dAtA[i:], *m.Hostname)
	}
	if m.Datacenter != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Datacenter)))
		i += copy(dAtA[i:], *m.Datacenter)
	}
	if m.Rack != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.Rack)))
		i += copy(dAtA[i:], *m.Rack)
	}
	if m.ServerId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAchb(dAtA, i, uint64(len(*m.ServerId)))
		i += copy(dAtA[i:], *m.ServerId)
	}
	if len(m.NetInfo) > 0 {
		for _, msg := range m.NetInfo {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintAchb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsUp == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x40
		i++
		if *m.IsUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsLocal != nil {
		dAtA[i] = 0x48
		i++
		if *m.IsLocal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SortMetric != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.SortMetric))
	}
	if m.CpuMetric != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.CpuMetric))
	}
	if m.CapacityMetric != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.CapacityMetric))
	}
	if len(m.Database) > 0 {
		for _, s := range m.Database {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Uptodate != nil {
		dAtA[i] = 0x78
		i++
		if *m.Uptodate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TimeUp == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAchb(dAtA, i, uint64(*m.TimeUp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2ServerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2ServerReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAchb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACPY2Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACPY2Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAchb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ACPHeartBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerInfo != nil {
		l = m.PeerInfo.Size()
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.SortMetric != nil {
		n += 1 + sovAchb(uint64(*m.SortMetric))
	}
	if m.ProcessId != nil {
		n += 1 + sovAchb(uint64(*m.ProcessId))
	}
	if m.CpuMetric != nil {
		n += 1 + sovAchb(uint64(*m.CpuMetric))
	}
	if m.CapacityMetric != nil {
		n += 1 + sovAchb(uint64(*m.CapacityMetric))
	}
	if len(m.Database) > 0 {
		for _, s := range m.Database {
			l = len(s)
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.Uptodate != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPHeartBeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Myself != nil {
		l = m.Myself.Size()
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPHeartBeatReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusCode != nil {
		n += 1 + sovAchb(uint64(*m.StatusCode))
	}
	if m.StatusMessage != nil {
		l = len(*m.StatusMessage)
		n += 1 + l + sovAchb(uint64(l))
	}
	if len(m.Hbinfo) > 0 {
		for _, e := range m.Hbinfo {
			l = e.Size()
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2MapDatum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Map != nil {
		l = len(*m.Map)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Shard != nil {
		n += 1 + sovAchb(uint64(*m.Shard))
	}
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Version != nil {
		n += 1 + sovAchb(uint64(*m.Version))
	}
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Expire != nil {
		n += 1 + sovAchb(uint64(*m.Expire))
	}
	if m.ConfTime != nil {
		n += 1 + sovAchb(uint64(*m.ConfTime))
	}
	if m.IfVersion != nil {
		n += 1 + sovAchb(uint64(*m.IfVersion))
	}
	if len(m.Location) > 0 {
		for _, s := range m.Location {
			l = len(s)
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2GetSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2GetRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Map != nil {
		l = len(*m.Map)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Key0 != nil {
		l = len(*m.Key0)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Key1 != nil {
		l = len(*m.Key1)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Version0 != nil {
		n += 1 + sovAchb(uint64(*m.Version0))
	}
	if m.Version1 != nil {
		n += 1 + sovAchb(uint64(*m.Version1))
	}
	if m.Shard != nil {
		n += 1 + sovAchb(uint64(*m.Shard))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2DistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hop != nil {
		n += 1 + sovAchb(uint64(*m.Hop))
	}
	if m.Expire != nil {
		n += 1 + sovAchb(uint64(*m.Expire))
	}
	if m.Sender != nil {
		l = len(*m.Sender)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2DistReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusCode != nil {
		n += 1 + sovAchb(uint64(*m.StatusCode))
	}
	if m.StatusMessage != nil {
		l = len(*m.StatusMessage)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.ResultCode != nil {
		n += 1 + sovAchb(uint64(*m.ResultCode))
	}
	if m.ConfTime != nil {
		n += 1 + sovAchb(uint64(*m.ConfTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2CheckValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Map != nil {
		l = len(*m.Map)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Treeid != nil {
		n += 1 + sovAchb(uint64(*m.Treeid))
	}
	if m.Level != nil {
		n += 1 + sovAchb(uint64(*m.Level))
	}
	if m.Version != nil {
		n += 1 + sovAchb(uint64(*m.Version))
	}
	if m.Shard != nil {
		n += 1 + sovAchb(uint64(*m.Shard))
	}
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Hash != nil {
		l = len(m.Hash)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Keycount != nil {
		n += 1 + sovAchb(uint64(*m.Keycount))
	}
	if m.Children != nil {
		n += 1 + sovAchb(uint64(*m.Children))
	}
	if m.Isvalid != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2CheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Map != nil {
		l = len(*m.Map)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Treeid != nil {
		n += 1 + sovAchb(uint64(*m.Treeid))
	}
	if m.Level != nil {
		n += 1 + sovAchb(uint64(*m.Level))
	}
	if m.Version != nil {
		n += 1 + sovAchb(uint64(*m.Version))
	}
	if m.Maxresult != nil {
		n += 1 + sovAchb(uint64(*m.Maxresult))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2CheckReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Check) > 0 {
		for _, e := range m.Check {
			l = e.Size()
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2RingConfReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Map != nil {
		l = len(*m.Map)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Datacenter != nil {
		l = len(*m.Datacenter)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2RingPart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shard != nil {
		n += 1 + sovAchb(uint64(*m.Shard))
	}
	if len(m.Server) > 0 {
		for _, s := range m.Server {
			l = len(s)
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2RingConfReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		n += 1 + sovAchb(uint64(*m.Version))
	}
	if m.IsStable != nil {
		n += 2
	}
	if len(m.Part) > 0 {
		for _, e := range m.Part {
			l = e.Size()
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2ServerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subsystem != nil {
		l = len(*m.Subsystem)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Environment != nil {
		l = len(*m.Environment)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Hostname != nil {
		l = len(*m.Hostname)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Datacenter != nil {
		l = len(*m.Datacenter)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.ServerId != nil {
		l = len(*m.ServerId)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2ServerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subsystem != nil {
		l = len(*m.Subsystem)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Environment != nil {
		l = len(*m.Environment)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Hostname != nil {
		l = len(*m.Hostname)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Datacenter != nil {
		l = len(*m.Datacenter)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.Rack != nil {
		l = len(*m.Rack)
		n += 1 + l + sovAchb(uint64(l))
	}
	if m.ServerId != nil {
		l = len(*m.ServerId)
		n += 1 + l + sovAchb(uint64(l))
	}
	if len(m.NetInfo) > 0 {
		for _, e := range m.NetInfo {
			l = e.Size()
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.IsUp != nil {
		n += 2
	}
	if m.IsLocal != nil {
		n += 2
	}
	if m.SortMetric != nil {
		n += 1 + sovAchb(uint64(*m.SortMetric))
	}
	if m.CpuMetric != nil {
		n += 1 + sovAchb(uint64(*m.CpuMetric))
	}
	if m.CapacityMetric != nil {
		n += 1 + sovAchb(uint64(*m.CapacityMetric))
	}
	if len(m.Database) > 0 {
		for _, s := range m.Database {
			l = len(s)
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.Uptodate != nil {
		n += 2
	}
	if m.TimeUp != nil {
		n += 2 + sovAchb(uint64(*m.TimeUp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2ServerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovAchb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACPY2Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAchb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAchb(x uint64) (n int) {
	return sovAchb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ACPHeartBeat) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPHeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPHeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerInfo == nil {
				m.PeerInfo = &kibitz.PeerInfo{}
			}
			if err := m.PeerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortMetric", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SortMetric = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuMetric", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpuMetric = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapacityMetric", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CapacityMetric = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = append(m.Database, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptodate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Uptodate = &b
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPHeartBeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPHeartBeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPHeartBeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Myself", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Myself == nil {
				m.Myself = &ACPHeartBeat{}
			}
			if err := m.Myself.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPHeartBeatReply) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPHeartBeatReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPHeartBeatReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusCode = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StatusMessage = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hbinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hbinfo = append(m.Hbinfo, &ACPHeartBeat{})
			if err := m.Hbinfo[len(m.Hbinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2MapDatum) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2MapDatum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2MapDatum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Map = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shard = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expire = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfTime = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfVersion", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IfVersion = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = append(m.Location, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2GetSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2GetSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2GetSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ACPY2MapDatum{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2GetRange) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2GetRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2GetRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Map = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key0 = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key1 = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version0", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version0 = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version1", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version1 = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shard = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2DistRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2DistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2DistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hop", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hop = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expire = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Sender = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ACPY2MapDatum{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2DistReply) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2DistReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2DistReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusCode = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StatusMessage = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResultCode = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2CheckValue) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2CheckValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2CheckValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Map = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treeid", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Treeid = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Level = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
			hasFields[0] |= uint64(0x00000002)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shard = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keycount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Keycount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Children = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isvalid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Isvalid = &b
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2CheckRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2CheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2CheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Map = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treeid", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Treeid = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Level = &v
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxresult", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Maxresult = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2CheckReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2CheckReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2CheckReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Check = append(m.Check, &ACPY2CheckValue{})
			if err := m.Check[len(m.Check)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2RingConfReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2RingConfReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2RingConfReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Map = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datacenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Datacenter = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2RingPart) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2RingPart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2RingPart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shard = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = append(m.Server, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2RingConfReply) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2RingConfReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2RingConfReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsStable = &b
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Part = append(m.Part, &ACPY2RingPart{})
			if err := m.Part[len(m.Part)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2ServerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2ServerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2ServerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Subsystem = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Environment = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Hostname = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datacenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Datacenter = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServerId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2ServerData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2ServerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2ServerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Subsystem = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Environment = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Hostname = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datacenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Datacenter = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Rack = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServerId = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetInfo = append(m.NetInfo, &kibitz.NetInfo{})
			if err := m.NetInfo[len(m.NetInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsUp = &b
			hasFields[0] |= uint64(0x00000010)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsLocal = &b
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortMetric", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SortMetric = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuMetric", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpuMetric = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapacityMetric", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CapacityMetric = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = append(m.Database, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptodate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Uptodate = &b
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeUp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeUp = &v
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2ServerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2ServerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2ServerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ACPY2ServerData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACPY2Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACPY2Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACPY2Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAchb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAchb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAchb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAchb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAchb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAchb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAchb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAchb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("achb.proto", fileDescriptor_achb_a37b42bc256bb4fa) }

var fileDescriptor_achb_a37b42bc256bb4fa = []byte{
	// 1280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x6e, 0x1b, 0x55,
	0x14, 0xee, 0x78, 0xfc, 0x33, 0x73, 0x9c, 0x26, 0xe1, 0xb6, 0xa4, 0x53, 0xa7, 0xa4, 0x66, 0x24,
	0x44, 0x54, 0x81, 0xdb, 0x84, 0x05, 0x42, 0xa8, 0x12, 0xa9, 0x8d, 0xd2, 0x4a, 0x04, 0x45, 0x13,
	0x5a, 0x89, 0x95, 0x75, 0x3d, 0x3e, 0x8e, 0x07, 0xcf, 0x5f, 0xe7, 0xde, 0x71, 0x6b, 0x56, 0xec,
	0x90, 0x60, 0x0f, 0xbc, 0x04, 0xef, 0xc1, 0x92, 0x05, 0x0f, 0x80, 0xca, 0x8a, 0x47, 0x60, 0x81,
	0x84, 0xee, 0xcf, 0xd8, 0x63, 0xd7, 0x49, 0x5b, 0x76, 0xf7, 0xfc, 0xcc, 0x99, 0x73, 0xbe, 0xef,
	0x9c, 0x7b, 0x0f, 0x00, 0xf5, 0xc7, 0x83, 0x4e, 0x9a, 0x25, 0x3c, 0x21, 0x0d, 0xea, 0xcb, 0x43,
	0xeb, 0xdd, 0xf3, 0x80, 0x8f, 0xf3, 0x41, 0xc7, 0x4f, 0xa2, 0xbb, 0xdf, 0xd0, 0x67, 0xf7, 0xee,
	0x4e, 0x82, 0x41, 0xc0, 0xbf, 0xbd, 0x9b, 0x22, 0x66, 0xca, 0xd7, 0xfd, 0xd7, 0x80, 0x8d, 0xa3,
	0xee, 0xe9, 0x43, 0xa4, 0x19, 0x7f, 0x80, 0x94, 0x93, 0x0f, 0xc1, 0x16, 0xe6, 0x7e, 0x10, 0x8f,
	0x12, 0xc7, 0x68, 0x57, 0xf6, 0x9b, 0x87, 0xdb, 0x1d, 0xf5, 0x5d, 0xe7, 0x14, 0x31, 0x7b, 0x14,
	0x8f, 0x12, 0xcf, 0x4a, 0xf5, 0x89, 0xdc, 0x86, 0x26, 0x4b, 0x32, 0xde, 0x8f, 0x90, 0x67, 0x81,
	0xef, 0x54, 0xda, 0xc6, 0x7e, 0xcd, 0x03, 0xa1, 0x3a, 0x91, 0x1a, 0xf2, 0x0e, 0x40, 0x9a, 0x25,
	0x3e, 0x32, 0xd6, 0x0f, 0x86, 0x8e, 0x29, 0xed, 0xb6, 0xd6, 0x3c, 0x1a, 0x0a, 0xb3, 0x9f, 0xe6,
	0xc5, 0xe7, 0x55, 0x65, 0xf6, 0xd3, 0x5c, 0x7f, 0xfd, 0x3e, 0x6c, 0xf9, 0x34, 0xa5, 0x7e, 0xc0,
	0x67, 0x85, 0x4f, 0x4d, 0xfa, 0x6c, 0x16, 0x6a, 0xed, 0xd8, 0x02, 0x6b, 0x48, 0x39, 0x1d, 0x50,
	0x86, 0x4e, 0xbd, 0x6d, 0xee, 0xdb, 0xde, 0x5c, 0x16, 0xb6, 0x3c, 0xe5, 0xc9, 0x90, 0x72, 0x74,
	0x1a, 0x6d, 0x63, 0xdf, 0xf2, 0xe6, 0xb2, 0xdb, 0x83, 0x6b, 0xe5, 0xf2, 0x3d, 0x7c, 0x9a, 0x23,
	0x13, 0x28, 0xd4, 0xa3, 0x19, 0xc3, 0x70, 0xe4, 0x18, 0x6d, 0x63, 0xbf, 0x79, 0xf8, 0x76, 0x47,
	0x63, 0xda, 0x59, 0xf2, 0xd6, 0x4e, 0xee, 0x0f, 0x06, 0xbc, 0xb5, 0x1c, 0x26, 0x0d, 0x67, 0x12,
	0x1b, 0x4e, 0x79, 0xce, 0xfa, 0x7e, 0x32, 0x44, 0x09, 0xa6, 0xc0, 0x46, 0xaa, 0xba, 0xc9, 0x10,
	0xc9, 0x7b, 0xb0, 0xa9, 0x1d, 0x22, 0x64, 0x8c, 0x9e, 0xa3, 0xc4, 0xcf, 0xf6, 0xae, 0x2a, 0xed,
	0x89, 0x52, 0x8a, 0x64, 0xc6, 0x03, 0xc9, 0x87, 0xd9, 0x36, 0x2f, 0x49, 0x46, 0x39, 0xb9, 0x7f,
	0x1b, 0x70, 0xf5, 0xa8, 0x7b, 0xfa, 0xf5, 0xe1, 0x09, 0x4d, 0x7b, 0x94, 0xe7, 0x11, 0xd9, 0x06,
	0x33, 0xa2, 0xa9, 0x4c, 0xc0, 0xf6, 0xc4, 0x91, 0x5c, 0x87, 0x1a, 0x1b, 0xd3, 0x6c, 0x28, 0x7f,
	0x78, 0xd5, 0x53, 0x82, 0xf0, 0x9b, 0xe0, 0xcc, 0x31, 0x95, 0xdf, 0x04, 0x67, 0xc4, 0x81, 0xc6,
	0x14, 0x33, 0x16, 0x24, 0xb1, 0xe4, 0xa6, 0xea, 0x15, 0xa2, 0x88, 0x30, 0xa5, 0x61, 0x8e, 0x92,
	0x8f, 0x0d, 0x4f, 0x09, 0x64, 0x07, 0xea, 0xf8, 0x3c, 0x0d, 0x32, 0x05, 0x74, 0xd5, 0xd3, 0x12,
	0xd9, 0x05, 0xdb, 0x4f, 0xe2, 0x51, 0x9f, 0x07, 0x11, 0x3a, 0xb6, 0x34, 0x59, 0x42, 0xf1, 0x55,
	0x10, 0xa1, 0xe8, 0x81, 0x60, 0xd4, 0x2f, 0xfe, 0x03, 0xd2, 0x6a, 0x07, 0xa3, 0x27, 0xfa, 0x4f,
	0x2d, 0xb0, 0xc2, 0xc4, 0xa7, 0x5c, 0x18, 0x9b, 0x8a, 0xda, 0x42, 0x76, 0x3f, 0x81, 0xa6, 0x2c,
	0xf5, 0x18, 0xf9, 0x19, 0x72, 0x72, 0x07, 0xaa, 0x82, 0x75, 0xc7, 0x90, 0x38, 0xed, 0x94, 0x71,
	0x5a, 0xc0, 0xe1, 0x49, 0x1f, 0xf7, 0xe7, 0x02, 0xa6, 0x63, 0xe4, 0x1e, 0x8d, 0xcf, 0x71, 0x0d,
	0x4c, 0x04, 0xaa, 0x13, 0x9c, 0xdd, 0xd3, 0xb4, 0xc8, 0xb3, 0xd6, 0x1d, 0xc8, 0x56, 0x56, 0xba,
	0x03, 0x91, 0xa2, 0x4e, 0xff, 0x9e, 0xc6, 0x69, 0x2e, 0x97, 0x6c, 0x07, 0x12, 0xab, 0x85, 0xed,
	0x60, 0x41, 0x43, 0xbd, 0x44, 0x83, 0xfb, 0x9d, 0x01, 0xdb, 0x32, 0xb3, 0x5e, 0xc0, 0xe6, 0x1d,
	0xb9, 0x0d, 0xe6, 0x38, 0x49, 0x75, 0x13, 0x89, 0x63, 0x09, 0xeb, 0x4a, 0xbb, 0x52, 0xc2, 0x7a,
	0x07, 0xea, 0x0c, 0xe3, 0x21, 0x66, 0x3a, 0x45, 0x2d, 0xcd, 0xc1, 0xa9, 0xca, 0xa1, 0xbe, 0x1c,
	0x9c, 0x9f, 0x0c, 0xd8, 0x2c, 0xa5, 0xf0, 0xbf, 0xbb, 0xb9, 0xf2, 0x72, 0x37, 0xdf, 0x86, 0x66,
	0x86, 0x2c, 0x0f, 0xb9, 0x8a, 0x63, 0xaa, 0x38, 0x4a, 0x25, 0xe3, 0x2c, 0xf5, 0x8a, 0x40, 0xd3,
	0x5c, 0xf4, 0x8a, 0xfb, 0x8f, 0x01, 0x5b, 0x32, 0xb1, 0xee, 0x18, 0xfd, 0xc9, 0x13, 0xd9, 0x74,
	0x2f, 0xf3, 0xb6, 0x03, 0x75, 0x9e, 0x21, 0x06, 0x45, 0x7f, 0x6b, 0x49, 0xe0, 0x1d, 0xe2, 0x14,
	0x43, 0x7d, 0x0f, 0x29, 0x61, 0xb9, 0xc9, 0x2b, 0x2b, 0x4d, 0xae, 0xf8, 0xa9, 0xad, 0x19, 0x93,
	0xba, 0x44, 0x57, 0x8e, 0x09, 0x81, 0xea, 0x98, 0xb2, 0xb1, 0x6c, 0xfa, 0x0d, 0x4f, 0x9e, 0x05,
	0xef, 0x13, 0x9c, 0xf9, 0x49, 0x1e, 0x73, 0xc7, 0x52, 0x55, 0x14, 0xb2, 0xb0, 0xf9, 0xe3, 0x20,
	0x1c, 0x66, 0x18, 0xcb, 0x69, 0xa8, 0x79, 0x73, 0x59, 0x64, 0x13, 0xb0, 0x29, 0x0d, 0x83, 0xa1,
	0x1c, 0x05, 0xcb, 0x2b, 0x44, 0xf7, 0x47, 0x75, 0xcb, 0xe8, 0xda, 0x4b, 0x8d, 0xf1, 0xe6, 0xd5,
	0x57, 0x5e, 0xa7, 0xfa, 0x5b, 0x60, 0x47, 0xf4, 0xb9, 0x62, 0x46, 0x5f, 0xbb, 0x0b, 0x85, 0x7b,
	0x54, 0x26, 0x42, 0xb5, 0x48, 0x07, 0x6a, 0xbe, 0x90, 0xf4, 0xfc, 0x39, 0xcb, 0x2d, 0xb6, 0x60,
	0xcc, 0x53, 0x6e, 0x6e, 0x4f, 0xf7, 0xb9, 0x17, 0xc4, 0xe7, 0xdd, 0x24, 0x1e, 0x79, 0xf8, 0x74,
	0x4d, 0x39, 0x7b, 0x00, 0xa2, 0x27, 0x7d, 0x8c, 0x39, 0x66, 0x7a, 0x14, 0x4b, 0x1a, 0xf7, 0xbe,
	0x9e, 0x63, 0x11, 0xe5, 0x94, 0x66, 0x7c, 0xc1, 0x9a, 0x08, 0x32, 0x67, 0x4d, 0x8e, 0x45, 0x36,
	0x95, 0x21, 0x4c, 0x35, 0x16, 0x42, 0x72, 0x9f, 0x01, 0x59, 0x49, 0x42, 0x94, 0x52, 0x42, 0xc5,
	0x58, 0x46, 0x65, 0x17, 0xec, 0x80, 0xf5, 0x19, 0xa7, 0x83, 0x50, 0x75, 0xb8, 0xe5, 0x59, 0x01,
	0x3b, 0x93, 0xb2, 0x98, 0xb1, 0x94, 0x66, 0x5c, 0x5f, 0xd4, 0x2b, 0x33, 0x56, 0x24, 0xe8, 0x49,
	0x1f, 0xf7, 0x57, 0x43, 0xff, 0xf9, 0x4c, 0x26, 0x52, 0xf0, 0x79, 0x0b, 0x6c, 0x96, 0x0f, 0xd8,
	0x8c, 0x71, 0x8c, 0xe4, 0xeb, 0x63, 0x7b, 0x0b, 0x05, 0x69, 0x43, 0x13, 0xe3, 0x69, 0x90, 0x25,
	0x71, 0x84, 0x31, 0xd7, 0x68, 0x94, 0x55, 0xa2, 0xb7, 0xc6, 0x09, 0xe3, 0x31, 0x8d, 0x50, 0x5f,
	0x00, 0x73, 0x79, 0x05, 0xca, 0xea, 0x2a, 0x94, 0xa2, 0x36, 0x85, 0x8a, 0x78, 0xab, 0x6b, 0xea,
	0x63, 0xa5, 0x78, 0x34, 0x74, 0xff, 0x30, 0x35, 0xe3, 0x2a, 0xdf, 0x1e, 0xe5, 0x74, 0x35, 0xd9,
	0xca, 0x2b, 0x92, 0xad, 0x5c, 0x9e, 0x6c, 0xe5, 0x8d, 0x92, 0x25, 0x50, 0xcd, 0xa8, 0x3f, 0xd1,
	0x79, 0xca, 0xf3, 0x72, 0x01, 0x75, 0x15, 0xb0, 0x28, 0x80, 0xdc, 0x01, 0x2b, 0x46, 0xae, 0x36,
	0x9b, 0x86, 0x24, 0x68, 0xab, 0xd8, 0x6c, 0xbe, 0x44, 0x2e, 0x17, 0x9b, 0x46, 0xac, 0x0e, 0xe4,
	0x1a, 0xd4, 0x02, 0xd6, 0xcf, 0x53, 0xc7, 0x92, 0x0c, 0x57, 0x03, 0xf6, 0x38, 0x25, 0x37, 0xc1,
	0x0a, 0x58, 0x5f, 0x3c, 0x3e, 0xa1, 0x1c, 0x5b, 0x39, 0x9b, 0x5f, 0x08, 0x71, 0x75, 0x0f, 0x82,
	0x75, 0x7b, 0x50, 0x69, 0xd1, 0x69, 0xbe, 0xc6, 0xa2, 0xb3, 0xf1, 0xca, 0x45, 0x67, 0xf3, 0x92,
	0x45, 0x67, 0x6b, 0x79, 0xd1, 0x21, 0x37, 0xa0, 0x21, 0x2e, 0x54, 0x51, 0xd2, 0xb6, 0x7a, 0x2e,
	0x84, 0xf8, 0x38, 0x75, 0x3f, 0xd3, 0x43, 0x58, 0x74, 0xa1, 0xe8, 0xfe, 0x0f, 0x96, 0xde, 0xd1,
	0x95, 0x39, 0x5e, 0xd0, 0xaf, 0x1f, 0x8b, 0x0d, 0x00, 0x69, 0xf8, 0x3c, 0x4a, 0xf9, 0xec, 0xf0,
	0xfb, 0x2a, 0xd4, 0x8e, 0xba, 0x59, 0xea, 0x93, 0x1e, 0xd4, 0xcf, 0x30, 0x1e, 0x3e, 0x7c, 0x40,
	0x6e, 0xad, 0xdf, 0x58, 0x54, 0xc7, 0xb7, 0x5a, 0x17, 0x58, 0xd3, 0x70, 0xe6, 0x5e, 0x21, 0x5d,
	0xb0, 0x8f, 0x91, 0x9f, 0x60, 0x36, 0x09, 0x91, 0xb4, 0xd6, 0x5c, 0x29, 0x45, 0x18, 0x67, 0xad,
	0x4d, 0x05, 0xf9, 0x08, 0xcc, 0x63, 0xe4, 0xe4, 0xfa, 0xb2, 0x8b, 0xda, 0x1a, 0x5a, 0x6b, 0xb5,
	0xee, 0x15, 0xf2, 0x29, 0x98, 0xa7, 0x39, 0x27, 0x37, 0x97, 0xcd, 0xa5, 0x47, 0xb9, 0x75, 0x63,
	0x9d, 0x49, 0xfd, 0xf1, 0x63, 0xa8, 0xa9, 0xad, 0x62, 0xe7, 0xa5, 0xe8, 0x52, 0x7f, 0xe1, 0x5f,
	0x7b, 0x60, 0x15, 0x57, 0xd1, 0xea, 0xaf, 0x4b, 0xf7, 0x64, 0x6b, 0xf7, 0x22, 0x53, 0x81, 0x5a,
	0x43, 0xf1, 0xc4, 0xc8, 0xee, 0x3a, 0xfa, 0x8a, 0x0a, 0x6e, 0xae, 0x37, 0xaa, 0x20, 0xf7, 0xc1,
	0x3a, 0x1b, 0xe7, 0xbc, 0x97, 0x3c, 0x8b, 0xc9, 0xb5, 0x65, 0x47, 0xc9, 0xf5, 0xe5, 0xcc, 0x3d,
	0xd8, 0xfe, 0xed, 0xc5, 0x9e, 0xf1, 0xfb, 0x8b, 0x3d, 0xe3, 0xcf, 0x17, 0x7b, 0xc6, 0x2f, 0x7f,
	0xed, 0x5d, 0xf9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x87, 0x82, 0x3d, 0x17, 0xa6, 0x0c, 0x00, 0x00,
}
