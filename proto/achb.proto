
syntax = "proto3";
package acproto;
import "github.com/jaw0/kibitz/peer.proto";

message ACPHeartBeat {
        kibitz.PeerInfo peer_info      = 1;
        int32          sort_metric     = 2;
        int32          process_id      = 3;

        int32          cpu_metric      = 4;
        int32          capacity_metric = 5;
        repeated string         database        = 6;
        bool           uptodate        = 7;    // all databases are synced
}

message ACPHeartBeatRequest {
        ACPHeartBeat   myself        = 1;
}

message ACPHeartBeatReply {
        int32          status_code     = 1;
        string         status_message  = 2;
        repeated ACPHeartBeat   hbinfo          = 3;
}

message ACPY2MapDatum {
        string         map             = 1;
        uint32         shard           = 2;
        string         key             = 3;
        uint64         version         = 4;
        bytes          value           = 5;
        uint64         expire          = 7;
        uint64         conf_time       = 9;    // ring version - so client can detect reconfig
        uint64         if_version      = 10;
        repeated string         location        = 11;   // redirect - try here instead
};

message ACPY2GetSet {
        repeated ACPY2MapDatum  data            = 1;
};

message ACPY2GetRange {
        string         map             = 1;
        string         key0            = 2;
        string         key1            = 3;
        uint64         version0        = 4;
        uint64         version1        = 5;
        uint32         shard           = 6;    // nyi
};

message ACPY2DistRequest {
        int32          hop             = 1;
        uint64         expire          = 2;
        string         sender          = 3;
        ACPY2MapDatum  data            = 4;
};

message ACPY2DistReply {
        int32          status_code     = 1;
        string         status_message  = 2;
        int32          result_code     = 3;
        int64          conf_time       = 4;    // ring version - so client can detect reconfig
};

message ACPY2CheckValue {
        string         map             = 1;
        uint32         treeid          = 2;
        int32          level           = 3;
        uint64         version         = 4;
        uint32         shard           = 5;
        string         key             = 6;
        bytes          hash            = 7;
        int64          keycount        = 8;
        int32          children        = 9;
        bool           isvalid         = 10;
};

message ACPY2CheckRequest {
        string         map             = 1;
        uint32         treeid          = 2;
        int32          level           = 3;
        uint64         version         = 4;
        int32          maxresult       = 5;
};

message ACPY2CheckReply {
        repeated ACPY2CheckValue check          = 1;
};

message ACPY2RingConfReq {
        string         map             = 1;
        string         datacenter      = 2;
};

message ACPY2RingPart {
        uint32         shard           = 1;
        repeated string         server          = 2;
};

message ACPY2RingConfReply {
        uint64         version         = 1;
        bool           is_stable       = 2;
        repeated ACPY2RingPart  part            = 3;
};


message ACPY2ServerRequest {
        string         subsystem       = 1;
        string         environment     = 2;
        string         hostname        = 3;
        string         datacenter      = 4;
        string         server_id       = 5;
};
message ACPY2ServerData {
        string         subsystem       = 1;
        string         environment     = 2;
        string         hostname        = 3;
        string         datacenter      = 4;
        string         rack            = 5;
        string         server_id       = 6;
        repeated kibitz.NetInfo net_info        = 7;
        bool           is_up           = 8;
        bool           is_local        = 9;
        int32          sort_metric     = 10;
        int32          cpu_metric      = 11;
        int32          capacity_metric = 12;
        repeated string         database        = 14;
        bool           uptodate        = 15;
        uint64         time_up         = 16;

};
message ACPY2ServerReply {
        repeated ACPY2ServerData data           = 1;
};

message ACPY2Empty {};

service ACrpc {

        rpc SendHB(ACPHeartBeatRequest) returns (ACPHeartBeatReply) {}
        rpc GetMerkle(ACPY2CheckRequest) returns (ACPY2CheckReply) {}
        rpc Get(ACPY2GetSet) returns (ACPY2GetSet) {}
        rpc Put(ACPY2DistRequest) returns (ACPY2DistReply) {}
        rpc Range(ACPY2GetRange) returns (ACPY2GetSet) {}
        rpc RingConf(ACPY2RingConfReq) returns (ACPY2RingConfReply) {}
        rpc Servers(ACPY2ServerRequest) returns (ACPY2ServerReply) {}

        rpc ShutDown(ACPY2Empty) returns (ACPHeartBeatReply) {}
}
