// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: compat.proto

package monitor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ACP1HeartBeat struct {
	StatusCode           *int32   `protobuf:"varint,1,req,name=status_code,json=statusCode" json:"status_code,omitempty"`
	StatusMessage        *string  `protobuf:"bytes,2,opt,name=status_message,json=statusMessage" json:"status_message,omitempty"`
	Ipv4                 *uint32  `protobuf:"fixed32,3,opt,name=ipv4" json:"ipv4,omitempty"`
	Port                 *int32   `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	Timestamp            *uint64  `protobuf:"fixed64,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Subsystem            *string  `protobuf:"bytes,6,req,name=subsystem" json:"subsystem,omitempty"`
	Environment          *string  `protobuf:"bytes,7,opt,name=environment" json:"environment,omitempty"`
	SortMetric           *int32   `protobuf:"varint,8,opt,name=sort_metric,json=sortMetric" json:"sort_metric,omitempty"`
	Hostname             *string  `protobuf:"bytes,9,opt,name=hostname" json:"hostname,omitempty"`
	ServerId             *string  `protobuf:"bytes,10,req,name=server_id,json=serverId" json:"server_id,omitempty"`
	ProcessId            *int32   `protobuf:"varint,11,req,name=process_id,json=processId" json:"process_id,omitempty"`
	CapacityMetric       *int32   `protobuf:"varint,12,opt,name=capacity_metric,json=capacityMetric" json:"capacity_metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACP1HeartBeat) Reset()         { *m = ACP1HeartBeat{} }
func (m *ACP1HeartBeat) String() string { return proto.CompactTextString(m) }
func (*ACP1HeartBeat) ProtoMessage()    {}
func (*ACP1HeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_compat_bed30c9335c77d78, []int{0}
}
func (m *ACP1HeartBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACP1HeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACP1HeartBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACP1HeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACP1HeartBeat.Merge(dst, src)
}
func (m *ACP1HeartBeat) XXX_Size() int {
	return m.Size()
}
func (m *ACP1HeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_ACP1HeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_ACP1HeartBeat proto.InternalMessageInfo

func (m *ACP1HeartBeat) GetStatusCode() int32 {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return 0
}

func (m *ACP1HeartBeat) GetStatusMessage() string {
	if m != nil && m.StatusMessage != nil {
		return *m.StatusMessage
	}
	return ""
}

func (m *ACP1HeartBeat) GetIpv4() uint32 {
	if m != nil && m.Ipv4 != nil {
		return *m.Ipv4
	}
	return 0
}

func (m *ACP1HeartBeat) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *ACP1HeartBeat) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *ACP1HeartBeat) GetSubsystem() string {
	if m != nil && m.Subsystem != nil {
		return *m.Subsystem
	}
	return ""
}

func (m *ACP1HeartBeat) GetEnvironment() string {
	if m != nil && m.Environment != nil {
		return *m.Environment
	}
	return ""
}

func (m *ACP1HeartBeat) GetSortMetric() int32 {
	if m != nil && m.SortMetric != nil {
		return *m.SortMetric
	}
	return 0
}

func (m *ACP1HeartBeat) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *ACP1HeartBeat) GetServerId() string {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return ""
}

func (m *ACP1HeartBeat) GetProcessId() int32 {
	if m != nil && m.ProcessId != nil {
		return *m.ProcessId
	}
	return 0
}

func (m *ACP1HeartBeat) GetCapacityMetric() int32 {
	if m != nil && m.CapacityMetric != nil {
		return *m.CapacityMetric
	}
	return 0
}

type ACP1HeartBeatRequest struct {
	Myself               *ACP1HeartBeat `protobuf:"bytes,1,opt,name=myself" json:"myself,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ACP1HeartBeatRequest) Reset()         { *m = ACP1HeartBeatRequest{} }
func (m *ACP1HeartBeatRequest) String() string { return proto.CompactTextString(m) }
func (*ACP1HeartBeatRequest) ProtoMessage()    {}
func (*ACP1HeartBeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_compat_bed30c9335c77d78, []int{1}
}
func (m *ACP1HeartBeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACP1HeartBeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACP1HeartBeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACP1HeartBeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACP1HeartBeatRequest.Merge(dst, src)
}
func (m *ACP1HeartBeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *ACP1HeartBeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ACP1HeartBeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ACP1HeartBeatRequest proto.InternalMessageInfo

func (m *ACP1HeartBeatRequest) GetMyself() *ACP1HeartBeat {
	if m != nil {
		return m.Myself
	}
	return nil
}

type ACP1HeartBeatReply struct {
	StatusCode           *int32           `protobuf:"varint,1,req,name=status_code,json=statusCode" json:"status_code,omitempty"`
	StatusMessage        *string          `protobuf:"bytes,2,opt,name=status_message,json=statusMessage" json:"status_message,omitempty"`
	Hbinfo               []*ACP1HeartBeat `protobuf:"bytes,3,rep,name=hbinfo" json:"hbinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ACP1HeartBeatReply) Reset()         { *m = ACP1HeartBeatReply{} }
func (m *ACP1HeartBeatReply) String() string { return proto.CompactTextString(m) }
func (*ACP1HeartBeatReply) ProtoMessage()    {}
func (*ACP1HeartBeatReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_compat_bed30c9335c77d78, []int{2}
}
func (m *ACP1HeartBeatReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACP1HeartBeatReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACP1HeartBeatReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ACP1HeartBeatReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACP1HeartBeatReply.Merge(dst, src)
}
func (m *ACP1HeartBeatReply) XXX_Size() int {
	return m.Size()
}
func (m *ACP1HeartBeatReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ACP1HeartBeatReply.DiscardUnknown(m)
}

var xxx_messageInfo_ACP1HeartBeatReply proto.InternalMessageInfo

func (m *ACP1HeartBeatReply) GetStatusCode() int32 {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return 0
}

func (m *ACP1HeartBeatReply) GetStatusMessage() string {
	if m != nil && m.StatusMessage != nil {
		return *m.StatusMessage
	}
	return ""
}

func (m *ACP1HeartBeatReply) GetHbinfo() []*ACP1HeartBeat {
	if m != nil {
		return m.Hbinfo
	}
	return nil
}

func init() {
	proto.RegisterType((*ACP1HeartBeat)(nil), "monitor.ACP1HeartBeat")
	proto.RegisterType((*ACP1HeartBeatRequest)(nil), "monitor.ACP1HeartBeatRequest")
	proto.RegisterType((*ACP1HeartBeatReply)(nil), "monitor.ACP1HeartBeatReply")
}
func (m *ACP1HeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACP1HeartBeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusCode == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompat(dAtA, i, uint64(*m.StatusCode))
	}
	if m.StatusMessage != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompat(dAtA, i, uint64(len(*m.StatusMessage)))
		i += copy(dAtA[i:], *m.StatusMessage)
	}
	if m.Ipv4 != nil {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(*m.Ipv4))
		i += 4
	}
	if m.Port != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCompat(dAtA, i, uint64(*m.Port))
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(*m.Timestamp))
		i += 8
	}
	if m.Subsystem == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCompat(dAtA, i, uint64(len(*m.Subsystem)))
		i += copy(dAtA[i:], *m.Subsystem)
	}
	if m.Environment != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCompat(dAtA, i, uint64(len(*m.Environment)))
		i += copy(dAtA[i:], *m.Environment)
	}
	if m.SortMetric != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCompat(dAtA, i, uint64(*m.SortMetric))
	}
	if m.Hostname != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCompat(dAtA, i, uint64(len(*m.Hostname)))
		i += copy(dAtA[i:], *m.Hostname)
	}
	if m.ServerId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCompat(dAtA, i, uint64(len(*m.ServerId)))
		i += copy(dAtA[i:], *m.ServerId)
	}
	if m.ProcessId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x58
		i++
		i = encodeVarintCompat(dAtA, i, uint64(*m.ProcessId))
	}
	if m.CapacityMetric != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintCompat(dAtA, i, uint64(*m.CapacityMetric))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACP1HeartBeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACP1HeartBeatRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Myself != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompat(dAtA, i, uint64(m.Myself.Size()))
		n1, err := m.Myself.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACP1HeartBeatReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACP1HeartBeatReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusCode == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompat(dAtA, i, uint64(*m.StatusCode))
	}
	if m.StatusMessage != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompat(dAtA, i, uint64(len(*m.StatusMessage)))
		i += copy(dAtA[i:], *m.StatusMessage)
	}
	if len(m.Hbinfo) > 0 {
		for _, msg := range m.Hbinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCompat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCompat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ACP1HeartBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusCode != nil {
		n += 1 + sovCompat(uint64(*m.StatusCode))
	}
	if m.StatusMessage != nil {
		l = len(*m.StatusMessage)
		n += 1 + l + sovCompat(uint64(l))
	}
	if m.Ipv4 != nil {
		n += 5
	}
	if m.Port != nil {
		n += 1 + sovCompat(uint64(*m.Port))
	}
	if m.Timestamp != nil {
		n += 9
	}
	if m.Subsystem != nil {
		l = len(*m.Subsystem)
		n += 1 + l + sovCompat(uint64(l))
	}
	if m.Environment != nil {
		l = len(*m.Environment)
		n += 1 + l + sovCompat(uint64(l))
	}
	if m.SortMetric != nil {
		n += 1 + sovCompat(uint64(*m.SortMetric))
	}
	if m.Hostname != nil {
		l = len(*m.Hostname)
		n += 1 + l + sovCompat(uint64(l))
	}
	if m.ServerId != nil {
		l = len(*m.ServerId)
		n += 1 + l + sovCompat(uint64(l))
	}
	if m.ProcessId != nil {
		n += 1 + sovCompat(uint64(*m.ProcessId))
	}
	if m.CapacityMetric != nil {
		n += 1 + sovCompat(uint64(*m.CapacityMetric))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACP1HeartBeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Myself != nil {
		l = m.Myself.Size()
		n += 1 + l + sovCompat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACP1HeartBeatReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusCode != nil {
		n += 1 + sovCompat(uint64(*m.StatusCode))
	}
	if m.StatusMessage != nil {
		l = len(*m.StatusMessage)
		n += 1 + l + sovCompat(uint64(l))
	}
	if len(m.Hbinfo) > 0 {
		for _, e := range m.Hbinfo {
			l = e.Size()
			n += 1 + l + sovCompat(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCompat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCompat(x uint64) (n int) {
	return sovCompat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ACP1HeartBeat) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACP1HeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACP1HeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusCode = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StatusMessage = &s
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Ipv4 = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Port = &v
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Timestamp = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Subsystem = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Environment = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortMetric", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SortMetric = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Hostname = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServerId = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcessId = &v
			hasFields[0] |= uint64(0x00000008)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapacityMetric", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CapacityMetric = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACP1HeartBeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACP1HeartBeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACP1HeartBeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Myself", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Myself == nil {
				m.Myself = &ACP1HeartBeat{}
			}
			if err := m.Myself.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACP1HeartBeatReply) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACP1HeartBeatReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACP1HeartBeatReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusCode = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StatusMessage = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hbinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hbinfo = append(m.Hbinfo, &ACP1HeartBeat{})
			if err := m.Hbinfo[len(m.Hbinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCompat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCompat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCompat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCompat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompat   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("compat.proto", fileDescriptor_compat_bed30c9335c77d78) }

var fileDescriptor_compat_bed30c9335c77d78 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x4f, 0x6e, 0xd4, 0x30,
	0x14, 0xc6, 0x71, 0xa6, 0x93, 0x99, 0xbc, 0xb4, 0x05, 0x59, 0x08, 0x59, 0xfc, 0x09, 0xd6, 0x48,
	0x88, 0xac, 0x22, 0x81, 0xb8, 0x00, 0xad, 0x84, 0xe8, 0xa2, 0x12, 0xca, 0x05, 0x46, 0x6e, 0xf2,
	0x4a, 0x2d, 0xd5, 0xb1, 0xb1, 0xdf, 0x8c, 0x94, 0x3b, 0x70, 0x00, 0x8e, 0xc4, 0x92, 0x23, 0xa0,
	0xe1, 0x20, 0xa0, 0x38, 0x29, 0xc3, 0xb0, 0x60, 0xc5, 0xee, 0xe5, 0xf7, 0xbe, 0xf8, 0xfb, 0xec,
	0x0f, 0x8e, 0x1b, 0x6b, 0x9c, 0xa2, 0xca, 0x79, 0x4b, 0x96, 0x2f, 0x8c, 0xed, 0x34, 0x59, 0xbf,
	0xfa, 0x99, 0xc0, 0xc9, 0xdb, 0xf3, 0x0f, 0xaf, 0xde, 0xa3, 0xf2, 0x74, 0x86, 0x8a, 0xf8, 0x73,
	0xc8, 0x03, 0x29, 0xda, 0x84, 0x75, 0x63, 0x5b, 0x14, 0x4c, 0x26, 0xe5, 0xbc, 0x86, 0x11, 0x9d,
	0xdb, 0x16, 0xf9, 0x0b, 0x38, 0x9d, 0x04, 0x06, 0x43, 0x50, 0x1f, 0x51, 0x24, 0x92, 0x95, 0x59,
	0x7d, 0x32, 0xd2, 0xcb, 0x11, 0x72, 0x0e, 0x47, 0xda, 0x6d, 0xdf, 0x88, 0x99, 0x64, 0xe5, 0xa2,
	0x8e, 0xf3, 0xc0, 0x9c, 0xf5, 0x24, 0x8e, 0x24, 0x2b, 0xe7, 0x75, 0x9c, 0xf9, 0x53, 0xc8, 0x48,
	0x1b, 0x0c, 0xa4, 0x8c, 0x13, 0x73, 0xc9, 0xca, 0xb4, 0xde, 0x83, 0x61, 0x1b, 0x36, 0x57, 0xa1,
	0x0f, 0x84, 0x46, 0xa4, 0x32, 0x29, 0xb3, 0x7a, 0x0f, 0xb8, 0x84, 0x1c, 0xbb, 0xad, 0xf6, 0xb6,
	0x33, 0xd8, 0x91, 0x58, 0xc4, 0x1c, 0x7f, 0xa2, 0x78, 0x1b, 0xeb, 0x69, 0x6d, 0x90, 0xbc, 0x6e,
	0xc4, 0x32, 0x1a, 0xc3, 0x80, 0x2e, 0x23, 0xe1, 0x8f, 0x61, 0x79, 0x63, 0x03, 0x75, 0xca, 0xa0,
	0xc8, 0xe2, 0xff, 0xbf, 0xbf, 0xf9, 0x13, 0xc8, 0x02, 0xfa, 0x2d, 0xfa, 0xb5, 0x6e, 0x05, 0x44,
	0xf3, 0xe5, 0x08, 0x2e, 0x5a, 0xfe, 0x0c, 0xc0, 0x79, 0xdb, 0x60, 0x08, 0xc3, 0x36, 0x8f, 0xcf,
	0x94, 0x4d, 0xe4, 0xa2, 0xe5, 0x2f, 0xe1, 0x7e, 0xa3, 0x9c, 0x6a, 0x34, 0xf5, 0x77, 0xe6, 0xc7,
	0xd1, 0xfc, 0xf4, 0x0e, 0x8f, 0x01, 0x56, 0xef, 0xe0, 0xe1, 0x41, 0x01, 0x35, 0x7e, 0xda, 0x60,
	0x20, 0x5e, 0x41, 0x6a, 0xfa, 0x80, 0xb7, 0xd7, 0x82, 0x49, 0x56, 0xe6, 0xaf, 0x1f, 0x55, 0x53,
	0x67, 0xd5, 0xa1, 0x7c, 0x52, 0xad, 0x3e, 0x33, 0xe0, 0x7f, 0x1d, 0xe4, 0x6e, 0xfb, 0xff, 0x56,
	0x67, 0x05, 0xe9, 0xcd, 0x95, 0xee, 0xae, 0xad, 0x98, 0xc9, 0xd9, 0xbf, 0xe2, 0x8c, 0xaa, 0xb3,
	0x07, 0x5f, 0x77, 0x05, 0xfb, 0xb6, 0x2b, 0xd8, 0xf7, 0x5d, 0xc1, 0xbe, 0xfc, 0x28, 0xee, 0xfd,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x5d, 0xa5, 0x30, 0x82, 0x02, 0x00, 0x00,
}
