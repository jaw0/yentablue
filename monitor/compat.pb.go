// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: compat.proto

package monitor

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ACP1HeartBeat struct {
	StatusCode           int32    `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMessage        string   `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	Ipv4                 uint32   `protobuf:"fixed32,3,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Port                 int32    `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Timestamp            uint64   `protobuf:"fixed64,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Subsystem            string   `protobuf:"bytes,6,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
	Environment          string   `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	SortMetric           int32    `protobuf:"varint,8,opt,name=sort_metric,json=sortMetric,proto3" json:"sort_metric,omitempty"`
	Hostname             string   `protobuf:"bytes,9,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ServerId             string   `protobuf:"bytes,10,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ProcessId            int32    `protobuf:"varint,11,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	CapacityMetric       int32    `protobuf:"varint,12,opt,name=capacity_metric,json=capacityMetric,proto3" json:"capacity_metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACP1HeartBeat) Reset()         { *m = ACP1HeartBeat{} }
func (m *ACP1HeartBeat) String() string { return proto.CompactTextString(m) }
func (*ACP1HeartBeat) ProtoMessage()    {}
func (*ACP1HeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{0}
}
func (m *ACP1HeartBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACP1HeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACP1HeartBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACP1HeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACP1HeartBeat.Merge(m, src)
}
func (m *ACP1HeartBeat) XXX_Size() int {
	return m.Size()
}
func (m *ACP1HeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_ACP1HeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_ACP1HeartBeat proto.InternalMessageInfo

func (m *ACP1HeartBeat) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *ACP1HeartBeat) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *ACP1HeartBeat) GetIpv4() uint32 {
	if m != nil {
		return m.Ipv4
	}
	return 0
}

func (m *ACP1HeartBeat) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ACP1HeartBeat) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ACP1HeartBeat) GetSubsystem() string {
	if m != nil {
		return m.Subsystem
	}
	return ""
}

func (m *ACP1HeartBeat) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ACP1HeartBeat) GetSortMetric() int32 {
	if m != nil {
		return m.SortMetric
	}
	return 0
}

func (m *ACP1HeartBeat) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ACP1HeartBeat) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *ACP1HeartBeat) GetProcessId() int32 {
	if m != nil {
		return m.ProcessId
	}
	return 0
}

func (m *ACP1HeartBeat) GetCapacityMetric() int32 {
	if m != nil {
		return m.CapacityMetric
	}
	return 0
}

type ACP1HeartBeatRequest struct {
	Myself               *ACP1HeartBeat `protobuf:"bytes,1,opt,name=myself,proto3" json:"myself,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ACP1HeartBeatRequest) Reset()         { *m = ACP1HeartBeatRequest{} }
func (m *ACP1HeartBeatRequest) String() string { return proto.CompactTextString(m) }
func (*ACP1HeartBeatRequest) ProtoMessage()    {}
func (*ACP1HeartBeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{1}
}
func (m *ACP1HeartBeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACP1HeartBeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACP1HeartBeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACP1HeartBeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACP1HeartBeatRequest.Merge(m, src)
}
func (m *ACP1HeartBeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *ACP1HeartBeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ACP1HeartBeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ACP1HeartBeatRequest proto.InternalMessageInfo

func (m *ACP1HeartBeatRequest) GetMyself() *ACP1HeartBeat {
	if m != nil {
		return m.Myself
	}
	return nil
}

type ACP1HeartBeatReply struct {
	StatusCode           int32            `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMessage        string           `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	Hbinfo               []*ACP1HeartBeat `protobuf:"bytes,3,rep,name=hbinfo,proto3" json:"hbinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ACP1HeartBeatReply) Reset()         { *m = ACP1HeartBeatReply{} }
func (m *ACP1HeartBeatReply) String() string { return proto.CompactTextString(m) }
func (*ACP1HeartBeatReply) ProtoMessage()    {}
func (*ACP1HeartBeatReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{2}
}
func (m *ACP1HeartBeatReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACP1HeartBeatReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACP1HeartBeatReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACP1HeartBeatReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACP1HeartBeatReply.Merge(m, src)
}
func (m *ACP1HeartBeatReply) XXX_Size() int {
	return m.Size()
}
func (m *ACP1HeartBeatReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ACP1HeartBeatReply.DiscardUnknown(m)
}

var xxx_messageInfo_ACP1HeartBeatReply proto.InternalMessageInfo

func (m *ACP1HeartBeatReply) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *ACP1HeartBeatReply) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *ACP1HeartBeatReply) GetHbinfo() []*ACP1HeartBeat {
	if m != nil {
		return m.Hbinfo
	}
	return nil
}

func init() {
	proto.RegisterType((*ACP1HeartBeat)(nil), "monitor.ACP1HeartBeat")
	proto.RegisterType((*ACP1HeartBeatRequest)(nil), "monitor.ACP1HeartBeatRequest")
	proto.RegisterType((*ACP1HeartBeatReply)(nil), "monitor.ACP1HeartBeatReply")
}

func init() { proto.RegisterFile("compat.proto", fileDescriptor_bced3ff93dcaa7f8) }

var fileDescriptor_bced3ff93dcaa7f8 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x5b, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0xf1, 0x74, 0x26, 0x9d, 0x9c, 0xcc, 0x14, 0x64, 0x21, 0x64, 0x71, 0x09, 0x51, 0x25,
	0x44, 0x9e, 0x22, 0x71, 0xd9, 0x00, 0xad, 0x84, 0xe8, 0x43, 0x25, 0x94, 0x0d, 0x54, 0x6e, 0x72,
	0x4a, 0x2d, 0xd5, 0xb1, 0xb1, 0x4f, 0x2b, 0x65, 0x0f, 0x2c, 0x80, 0x25, 0xf1, 0xc8, 0x12, 0x50,
	0x59, 0x08, 0xa8, 0x4e, 0x4a, 0x29, 0x0f, 0x3c, 0xcd, 0xdb, 0xc9, 0xf7, 0xff, 0x39, 0x17, 0xfd,
	0x86, 0x9b, 0xca, 0x68, 0x2b, 0xa9, 0xb0, 0xce, 0x90, 0xe1, 0x43, 0x6d, 0x1a, 0x45, 0xc6, 0x8d,
	0x7f, 0x5d, 0xc0, 0xed, 0xbb, 0xe9, 0xc7, 0x57, 0x1f, 0x50, 0x3a, 0x9a, 0xa0, 0x24, 0xfe, 0x1c,
	0x12, 0x4f, 0x92, 0xb6, 0x7e, 0x51, 0x99, 0x1a, 0x05, 0xcb, 0x58, 0x7e, 0x55, 0x42, 0x87, 0xa6,
	0xa6, 0x46, 0xfe, 0x02, 0x46, 0xbd, 0x41, 0xa3, 0xf7, 0xf2, 0x13, 0x8a, 0x8b, 0x8c, 0xe5, 0x71,
	0x79, 0xdb, 0xd1, 0x79, 0x07, 0x39, 0x87, 0x4b, 0x65, 0x77, 0x6f, 0xc5, 0x20, 0x63, 0xf9, 0xb0,
	0x0c, 0xf5, 0x81, 0x59, 0xe3, 0x48, 0x5c, 0x86, 0xa6, 0xa1, 0xe6, 0x4f, 0x21, 0x26, 0xa5, 0xd1,
	0x93, 0xd4, 0x56, 0x5c, 0x65, 0x2c, 0x8f, 0xca, 0x13, 0x38, 0xa8, 0x7e, 0xbb, 0xf4, 0xad, 0x27,
	0xd4, 0x22, 0x0a, 0x73, 0x4e, 0x80, 0x67, 0x90, 0x60, 0xb3, 0x53, 0xce, 0x34, 0x1a, 0x1b, 0x12,
	0xc3, 0xa0, 0xff, 0x8d, 0xc2, 0x35, 0xc6, 0xd1, 0x42, 0x23, 0x39, 0x55, 0x89, 0xeb, 0xfe, 0x1a,
	0xe3, 0x68, 0x1e, 0x08, 0x7f, 0x0c, 0xd7, 0x6b, 0xe3, 0xa9, 0x91, 0x1a, 0x45, 0x1c, 0xfe, 0xff,
	0xf3, 0xcd, 0x9f, 0x40, 0xec, 0xd1, 0xed, 0xd0, 0x2d, 0x54, 0x2d, 0xa0, 0x13, 0x3b, 0x30, 0xab,
	0xf9, 0x33, 0x00, 0xeb, 0x4c, 0x85, 0xde, 0x1f, 0xd4, 0x24, 0x34, 0x8e, 0x7b, 0x32, 0xab, 0xf9,
	0x4b, 0xb8, 0x5f, 0x49, 0x2b, 0x2b, 0x45, 0xed, 0x71, 0xf8, 0x4d, 0xf0, 0x8c, 0x8e, 0xb8, 0x5b,
	0x60, 0xfc, 0x1e, 0x1e, 0x9e, 0x05, 0x50, 0xe2, 0xe7, 0x2d, 0x7a, 0xe2, 0x05, 0x44, 0xba, 0xf5,
	0xb8, 0x59, 0x85, 0x08, 0x92, 0xd7, 0x8f, 0x8a, 0x3e, 0xb3, 0xe2, 0xdc, 0xde, 0xbb, 0xc6, 0x5f,
	0x18, 0xf0, 0x7f, 0x1a, 0xd9, 0x4d, 0x7b, 0x67, 0x71, 0x16, 0x10, 0xad, 0x97, 0xaa, 0x59, 0x19,
	0x31, 0xc8, 0x06, 0xff, 0x5b, 0xa7, 0x73, 0x4d, 0x1e, 0x7c, 0xdb, 0xa7, 0xec, 0xfb, 0x3e, 0x65,
	0x3f, 0xf6, 0x29, 0xfb, 0xfa, 0x33, 0xbd, 0xb7, 0x8c, 0xc2, 0xd3, 0x7b, 0xf3, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x4b, 0x5d, 0xcb, 0xf7, 0x8a, 0x02, 0x00, 0x00,
}

func (m *ACP1HeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACP1HeartBeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ACP1HeartBeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CapacityMetric != 0 {
		i = encodeVarintCompat(dAtA, i, uint64(m.CapacityMetric))
		i--
		dAtA[i] = 0x60
	}
	if m.ProcessId != 0 {
		i = encodeVarintCompat(dAtA, i, uint64(m.ProcessId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ServerId) > 0 {
		i -= len(m.ServerId)
		copy(dAtA[i:], m.ServerId)
		i = encodeVarintCompat(dAtA, i, uint64(len(m.ServerId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintCompat(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x4a
	}
	if m.SortMetric != 0 {
		i = encodeVarintCompat(dAtA, i, uint64(m.SortMetric))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintCompat(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Subsystem) > 0 {
		i -= len(m.Subsystem)
		copy(dAtA[i:], m.Subsystem)
		i = encodeVarintCompat(dAtA, i, uint64(len(m.Subsystem)))
		i--
		dAtA[i] = 0x32
	}
	if m.Timestamp != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Timestamp))
		i--
		dAtA[i] = 0x29
	}
	if m.Port != 0 {
		i = encodeVarintCompat(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x20
	}
	if m.Ipv4 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Ipv4))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.StatusMessage) > 0 {
		i -= len(m.StatusMessage)
		copy(dAtA[i:], m.StatusMessage)
		i = encodeVarintCompat(dAtA, i, uint64(len(m.StatusMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.StatusCode != 0 {
		i = encodeVarintCompat(dAtA, i, uint64(m.StatusCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ACP1HeartBeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACP1HeartBeatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ACP1HeartBeatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Myself != nil {
		{
			size, err := m.Myself.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCompat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ACP1HeartBeatReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACP1HeartBeatReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ACP1HeartBeatReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hbinfo) > 0 {
		for iNdEx := len(m.Hbinfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hbinfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StatusMessage) > 0 {
		i -= len(m.StatusMessage)
		copy(dAtA[i:], m.StatusMessage)
		i = encodeVarintCompat(dAtA, i, uint64(len(m.StatusMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.StatusCode != 0 {
		i = encodeVarintCompat(dAtA, i, uint64(m.StatusCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCompat(dAtA []byte, offset int, v uint64) int {
	offset -= sovCompat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ACP1HeartBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusCode != 0 {
		n += 1 + sovCompat(uint64(m.StatusCode))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovCompat(uint64(l))
	}
	if m.Ipv4 != 0 {
		n += 5
	}
	if m.Port != 0 {
		n += 1 + sovCompat(uint64(m.Port))
	}
	if m.Timestamp != 0 {
		n += 9
	}
	l = len(m.Subsystem)
	if l > 0 {
		n += 1 + l + sovCompat(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovCompat(uint64(l))
	}
	if m.SortMetric != 0 {
		n += 1 + sovCompat(uint64(m.SortMetric))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovCompat(uint64(l))
	}
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovCompat(uint64(l))
	}
	if m.ProcessId != 0 {
		n += 1 + sovCompat(uint64(m.ProcessId))
	}
	if m.CapacityMetric != 0 {
		n += 1 + sovCompat(uint64(m.CapacityMetric))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACP1HeartBeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Myself != nil {
		l = m.Myself.Size()
		n += 1 + l + sovCompat(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACP1HeartBeatReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusCode != 0 {
		n += 1 + sovCompat(uint64(m.StatusCode))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovCompat(uint64(l))
	}
	if len(m.Hbinfo) > 0 {
		for _, e := range m.Hbinfo {
			l = e.Size()
			n += 1 + l + sovCompat(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCompat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCompat(x uint64) (n int) {
	return sovCompat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ACP1HeartBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACP1HeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACP1HeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			m.Ipv4 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subsystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortMetric", wireType)
			}
			m.SortMetric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortMetric |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessId", wireType)
			}
			m.ProcessId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapacityMetric", wireType)
			}
			m.CapacityMetric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CapacityMetric |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACP1HeartBeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACP1HeartBeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACP1HeartBeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Myself", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Myself == nil {
				m.Myself = &ACP1HeartBeat{}
			}
			if err := m.Myself.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACP1HeartBeatReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACP1HeartBeatReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACP1HeartBeatReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hbinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hbinfo = append(m.Hbinfo, &ACP1HeartBeat{})
			if err := m.Hbinfo[len(m.Hbinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCompat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCompat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCompat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCompat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCompat = fmt.Errorf("proto: unexpected end of group")
)
