// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: merkwire.proto

package merkle

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LeafSave struct {
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Shard   uint32 `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Key     string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *LeafSave) Reset()      { *m = LeafSave{} }
func (*LeafSave) ProtoMessage() {}
func (*LeafSave) Descriptor() ([]byte, []int) {
	return fileDescriptor_merkwire_61104c8bd4f442ee, []int{0}
}
func (m *LeafSave) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeafSave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeafSave.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LeafSave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeafSave.Merge(dst, src)
}
func (m *LeafSave) XXX_Size() int {
	return m.Size()
}
func (m *LeafSave) XXX_DiscardUnknown() {
	xxx_messageInfo_LeafSave.DiscardUnknown(m)
}

var xxx_messageInfo_LeafSave proto.InternalMessageInfo

func (m *LeafSave) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *LeafSave) GetShard() uint32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *LeafSave) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type LeafSaves struct {
	Save []*LeafSave `protobuf:"bytes,1,rep,name=save" json:"save,omitempty"`
}

func (m *LeafSaves) Reset()      { *m = LeafSaves{} }
func (*LeafSaves) ProtoMessage() {}
func (*LeafSaves) Descriptor() ([]byte, []int) {
	return fileDescriptor_merkwire_61104c8bd4f442ee, []int{1}
}
func (m *LeafSaves) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeafSaves) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeafSaves.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LeafSaves) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeafSaves.Merge(dst, src)
}
func (m *LeafSaves) XXX_Size() int {
	return m.Size()
}
func (m *LeafSaves) XXX_DiscardUnknown() {
	xxx_messageInfo_LeafSaves.DiscardUnknown(m)
}

var xxx_messageInfo_LeafSaves proto.InternalMessageInfo

func (m *LeafSaves) GetSave() []*LeafSave {
	if m != nil {
		return m.Save
	}
	return nil
}

type NodeSave struct {
	KeyCount int64  `protobuf:"varint,1,opt,name=key_count,json=keyCount,proto3" json:"key_count,omitempty"`
	Slot     int32  `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Children int32  `protobuf:"varint,3,opt,name=children,proto3" json:"children,omitempty"`
	Hash     []byte `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *NodeSave) Reset()      { *m = NodeSave{} }
func (*NodeSave) ProtoMessage() {}
func (*NodeSave) Descriptor() ([]byte, []int) {
	return fileDescriptor_merkwire_61104c8bd4f442ee, []int{2}
}
func (m *NodeSave) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeSave.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeSave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSave.Merge(dst, src)
}
func (m *NodeSave) XXX_Size() int {
	return m.Size()
}
func (m *NodeSave) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSave.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSave proto.InternalMessageInfo

func (m *NodeSave) GetKeyCount() int64 {
	if m != nil {
		return m.KeyCount
	}
	return 0
}

func (m *NodeSave) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *NodeSave) GetChildren() int32 {
	if m != nil {
		return m.Children
	}
	return 0
}

func (m *NodeSave) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type NodeSaves struct {
	Save []*NodeSave `protobuf:"bytes,1,rep,name=save" json:"save,omitempty"`
}

func (m *NodeSaves) Reset()      { *m = NodeSaves{} }
func (*NodeSaves) ProtoMessage() {}
func (*NodeSaves) Descriptor() ([]byte, []int) {
	return fileDescriptor_merkwire_61104c8bd4f442ee, []int{3}
}
func (m *NodeSaves) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSaves) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeSaves.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NodeSaves) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSaves.Merge(dst, src)
}
func (m *NodeSaves) XXX_Size() int {
	return m.Size()
}
func (m *NodeSaves) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSaves.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSaves proto.InternalMessageInfo

func (m *NodeSaves) GetSave() []*NodeSave {
	if m != nil {
		return m.Save
	}
	return nil
}

func init() {
	proto.RegisterType((*LeafSave)(nil), "merkle.leaf_save")
	proto.RegisterType((*LeafSaves)(nil), "merkle.leaf_saves")
	proto.RegisterType((*NodeSave)(nil), "merkle.node_save")
	proto.RegisterType((*NodeSaves)(nil), "merkle.node_saves")
}
func (this *LeafSave) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeafSave)
	if !ok {
		that2, ok := that.(LeafSave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Shard != that1.Shard {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *LeafSaves) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeafSaves)
	if !ok {
		that2, ok := that.(LeafSaves)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Save) != len(that1.Save) {
		return false
	}
	for i := range this.Save {
		if !this.Save[i].Equal(that1.Save[i]) {
			return false
		}
	}
	return true
}
func (this *NodeSave) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeSave)
	if !ok {
		that2, ok := that.(NodeSave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KeyCount != that1.KeyCount {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	if this.Children != that1.Children {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	return true
}
func (this *NodeSaves) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeSaves)
	if !ok {
		that2, ok := that.(NodeSaves)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Save) != len(that1.Save) {
		return false
	}
	for i := range this.Save {
		if !this.Save[i].Equal(that1.Save[i]) {
			return false
		}
	}
	return true
}
func (this *LeafSave) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&merkle.LeafSave{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Shard: "+fmt.Sprintf("%#v", this.Shard)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeafSaves) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&merkle.LeafSaves{")
	if this.Save != nil {
		s = append(s, "Save: "+fmt.Sprintf("%#v", this.Save)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeSave) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&merkle.NodeSave{")
	s = append(s, "KeyCount: "+fmt.Sprintf("%#v", this.KeyCount)+",\n")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "Children: "+fmt.Sprintf("%#v", this.Children)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeSaves) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&merkle.NodeSaves{")
	if this.Save != nil {
		s = append(s, "Save: "+fmt.Sprintf("%#v", this.Save)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMerkwire(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LeafSave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeafSave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMerkwire(dAtA, i, uint64(m.Version))
	}
	if m.Shard != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMerkwire(dAtA, i, uint64(m.Shard))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMerkwire(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *LeafSaves) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeafSaves) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Save) > 0 {
		for _, msg := range m.Save {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMerkwire(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NodeSave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMerkwire(dAtA, i, uint64(m.KeyCount))
	}
	if m.Slot != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMerkwire(dAtA, i, uint64(m.Slot))
	}
	if m.Children != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMerkwire(dAtA, i, uint64(m.Children))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMerkwire(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *NodeSaves) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSaves) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Save) > 0 {
		for _, msg := range m.Save {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMerkwire(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintMerkwire(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LeafSave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovMerkwire(uint64(m.Version))
	}
	if m.Shard != 0 {
		n += 1 + sovMerkwire(uint64(m.Shard))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMerkwire(uint64(l))
	}
	return n
}

func (m *LeafSaves) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Save) > 0 {
		for _, e := range m.Save {
			l = e.Size()
			n += 1 + l + sovMerkwire(uint64(l))
		}
	}
	return n
}

func (m *NodeSave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyCount != 0 {
		n += 1 + sovMerkwire(uint64(m.KeyCount))
	}
	if m.Slot != 0 {
		n += 1 + sovMerkwire(uint64(m.Slot))
	}
	if m.Children != 0 {
		n += 1 + sovMerkwire(uint64(m.Children))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMerkwire(uint64(l))
	}
	return n
}

func (m *NodeSaves) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Save) > 0 {
		for _, e := range m.Save {
			l = e.Size()
			n += 1 + l + sovMerkwire(uint64(l))
		}
	}
	return n
}

func sovMerkwire(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMerkwire(x uint64) (n int) {
	return sovMerkwire(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LeafSave) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeafSave{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Shard:` + fmt.Sprintf("%v", this.Shard) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeafSaves) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeafSaves{`,
		`Save:` + strings.Replace(fmt.Sprintf("%v", this.Save), "LeafSave", "LeafSave", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeSave) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeSave{`,
		`KeyCount:` + fmt.Sprintf("%v", this.KeyCount) + `,`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`Children:` + fmt.Sprintf("%v", this.Children) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeSaves) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeSaves{`,
		`Save:` + strings.Replace(fmt.Sprintf("%v", this.Save), "NodeSave", "NodeSave", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMerkwire(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LeafSave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerkwire
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: leaf_save: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: leaf_save: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkwire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkwire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkwire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerkwire
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerkwire(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerkwire
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeafSaves) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerkwire
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: leaf_saves: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: leaf_saves: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Save", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkwire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerkwire
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Save = append(m.Save, &LeafSave{})
			if err := m.Save[len(m.Save)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerkwire(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerkwire
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerkwire
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: node_save: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: node_save: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyCount", wireType)
			}
			m.KeyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkwire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkwire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			m.Children = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkwire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Children |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkwire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMerkwire
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerkwire(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerkwire
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSaves) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerkwire
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: node_saves: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: node_saves: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Save", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkwire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMerkwire
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Save = append(m.Save, &NodeSave{})
			if err := m.Save[len(m.Save)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerkwire(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMerkwire
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMerkwire(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMerkwire
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerkwire
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerkwire
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMerkwire
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMerkwire
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMerkwire(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMerkwire = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMerkwire   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("merkwire.proto", fileDescriptor_merkwire_61104c8bd4f442ee) }

var fileDescriptor_merkwire_61104c8bd4f442ee = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x3f, 0x4e, 0xc3, 0x30,
	0x14, 0xc6, 0xfd, 0x48, 0x5a, 0x9a, 0xc7, 0x1f, 0x81, 0xc5, 0x60, 0x81, 0xf4, 0x14, 0x55, 0x42,
	0xca, 0xd4, 0x81, 0x72, 0x02, 0x98, 0x59, 0x7c, 0x81, 0x2a, 0xb4, 0x46, 0xa9, 0x12, 0x62, 0x64,
	0x97, 0xa2, 0x6e, 0x1c, 0x81, 0x63, 0x70, 0x14, 0xc6, 0x8e, 0x1d, 0x89, 0xb3, 0x30, 0xf6, 0x08,
	0xc8, 0x8e, 0xc8, 0xc6, 0xf6, 0xfd, 0xe4, 0x4f, 0xfe, 0x7e, 0x7a, 0x78, 0xfa, 0xac, 0x4c, 0xf9,
	0xb6, 0x34, 0x6a, 0xf2, 0x62, 0xf4, 0x4a, 0xf3, 0xa1, 0xe7, 0x4a, 0x8d, 0x1f, 0x30, 0xa9, 0x54,
	0xfe, 0x34, 0xb3, 0xf9, 0x5a, 0x71, 0x81, 0x87, 0x6b, 0x65, 0xec, 0x52, 0xd7, 0x02, 0x52, 0xc8,
	0x62, 0xf9, 0x87, 0xfc, 0x02, 0x07, 0xb6, 0xc8, 0xcd, 0x42, 0x1c, 0xa4, 0x90, 0x9d, 0xc8, 0x0e,
	0xf8, 0x19, 0x46, 0xa5, 0xda, 0x88, 0x28, 0x85, 0x2c, 0x91, 0x3e, 0x8e, 0xa7, 0x88, 0xfd, 0x77,
	0x96, 0x5f, 0x63, 0xec, 0x83, 0x80, 0x34, 0xca, 0x8e, 0x6e, 0xce, 0x27, 0xdd, 0xe6, 0xa4, 0x6f,
	0xc8, 0xf0, 0x3c, 0xae, 0x30, 0xa9, 0xf5, 0x42, 0x75, 0x0e, 0x57, 0x98, 0x94, 0x6a, 0x33, 0x9b,
	0xeb, 0xd7, 0x7a, 0x15, 0x2c, 0x22, 0x39, 0x2a, 0xd5, 0xe6, 0xde, 0x33, 0xe7, 0x18, 0xdb, 0x4a,
	0xaf, 0x82, 0xc5, 0x40, 0x86, 0xcc, 0x2f, 0x71, 0x34, 0x2f, 0x96, 0xd5, 0xc2, 0xa8, 0x3a, 0x98,
	0x0c, 0x64, 0xcf, 0xbe, 0x5f, 0xe4, 0xb6, 0x10, 0x71, 0x0a, 0xd9, 0xb1, 0x0c, 0xd9, 0x2b, 0xf6,
	0x6b, 0xff, 0x2a, 0xf6, 0x8d, 0x4e, 0xf1, 0xee, 0x76, 0xdb, 0x10, 0xdb, 0x35, 0xc4, 0xf6, 0x0d,
	0xc1, 0xbb, 0x23, 0xf8, 0x74, 0x04, 0x5f, 0x8e, 0x60, 0xeb, 0x08, 0xbe, 0x1d, 0xc1, 0x8f, 0x23,
	0xb6, 0x77, 0x04, 0x1f, 0x2d, 0xb1, 0x6d, 0x4b, 0x6c, 0xd7, 0x12, 0x7b, 0x1c, 0x86, 0x5b, 0x4f,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x2b, 0x85, 0x15, 0x7d, 0x01, 0x00, 0x00,
}
